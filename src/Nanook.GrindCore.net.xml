<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nanook.GrindCore</name>
    </assembly>
    <members>
        <member name="T:Nanook.GrindCore.Blake.Blake2sp">
            <summary>
            Represents the Blake2sp hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake2sp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Blake.Blake2sp"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake2sp.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake2sp.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the array length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake2sp.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.CBlake2sp*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="state">Pointer to the hash state.</param>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake2sp.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.Blake.Blake2sp"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.Blake.Blake2sp"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake2sp.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake2sp.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake2sp.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.Blake.Blake3">
            <summary>
            Represents the Blake3 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Blake.Blake3"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake3.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake3.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake3.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.Blake3Hasher*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="hasher">Pointer to the hash state.</param>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake3.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.Blake.Blake3"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.Blake.Blake3"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake3.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake3.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.Blake.Blake3.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.BrotliBlock">
            <summary>
            Provides a Brotli compression block for compressing and decompressing data using the Brotli algorithm.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Brotli.BrotliBlock.RequiredCompressOutputSize">
            <summary>
            Gets the required output buffer size for compression, including Brotli overhead.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliBlock.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Brotli.BrotliBlock"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> or <c>options.BlockSize</c> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliBlock.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Compresses the source data block into the destination data block using Brotli.
            </summary>
            <param name="srcData">The source data block to compress.</param>
            <param name="dstData">The destination data block to write compressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if Brotli block compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliBlock.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Decompresses the source data block into the destination data block using Brotli.
            </summary>
            <param name="srcData">The source data block to decompress.</param>
            <param name="dstData">The destination data block to write decompressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if Brotli block decompression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliBlock.OnDispose">
            <summary>
            Releases resources used by the Brotli encoder.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.BrotliDecoder">
            <summary>
            Provides non-allocating, performant Brotli decompression methods. The methods decompress in a single pass without using a BrotliStream /> instance.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliDecoder.InitializeDecoder(Nanook.GrindCore.CompressionVersion)">
            <summary>
            Initializes the Brotli decoder with the specified version, or the latest Brotli version if not specified.
            </summary>
            <param name="version">The Brotli version to use, or <c>null</c> for the latest.</param>
            <exception cref="T:System.IO.IOException">Thrown if the decoder could not be created.</exception>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliDecoder.EnsureInitialized">
            <summary>
            Ensures the decoder is initialized, initializing it if necessary.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the decoder has been disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliDecoder.Dispose">
            <summary>
            Releases all resources used by the current Brotli decoder instance.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliDecoder.EnsureNotDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the decoder has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the decoder has been disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliDecoder.DecodeData(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Int32@,System.Int32@)">
            <summary>
            Decompresses data that was compressed using the Brotli algorithm.
            </summary>
            <param name="inData">A buffer containing the compressed data.</param>
            <param name="outData">When this method returns, a buffer containing the decompressed data.</param>
            <param name="bytesConsumed">The total number of bytes that were read from <paramref name="inData" />.</param>
            <param name="bytesWritten">The total number of bytes that were written in the <paramref name="outData" />.</param>
            <returns>OperationStatus</returns>
            <remarks>
            The return value can be as follows:
            - <see cref="F:Nanook.GrindCore.Brotli.OperationStatus.Done"/>: <paramref name="inData"/> was successfully and completely decompressed into <paramref name="outData"/>.
            - <see cref="F:Nanook.GrindCore.Brotli.OperationStatus.DestinationTooSmall"/>: There is not enough space in <paramref name="outData"/> to decompress <paramref name="inData"/>.
            - <see cref="F:Nanook.GrindCore.Brotli.OperationStatus.NeedMoreData"/>: The decompression action is partially done; at least one more byte is required to complete the decompression task. This method should be called again with more input to decompress.
            - <see cref="F:Nanook.GrindCore.Brotli.OperationStatus.InvalidData"/>: The data in <paramref name="inData"/> is invalid and could not be decompressed.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the decoder has been disposed.</exception>
            <exception cref="T:System.IO.IOException">Thrown if the decoder could not be created.</exception>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.BrotliEncoder">
            <summary>
            Provides methods and static methods to encode and decode data in a streamless, non-allocating, and performant manner using the Brotli data format specification.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.#ctor(Nanook.GrindCore.CompressionType,System.Int32,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Brotli.BrotliEncoder"/> structure using the specified quality and window.
            </summary>
            <param name="level">A value representing the Brotli compression level. 0 is the minimum (no compression), 11 is the maximum.</param>
            <param name="window">A value representing the encoder window bits. The minimum value is 10, and the maximum value is 24.</param>
            <param name="version">The Brotli version to use, or <c>null</c> for the latest.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="level"/> or <paramref name="window"/> is out of range.</exception>
            <exception cref="T:System.IO.IOException">Thrown if the encoder could not be created.</exception>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.InitializeEncoder(Nanook.GrindCore.CompressionVersion)">
            <summary>
            Performs a lazy initialization of the native encoder using the default Quality and Window values.
            </summary>
            <param name="version">The Brotli version to use, or <c>null</c> for the latest.</param>
            <exception cref="T:System.IO.IOException">Thrown if the encoder could not be created.</exception>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.EnsureInitialized">
            <summary>
            Ensures the encoder is initialized, initializing it if necessary.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the encoder has been disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.Dispose">
            <summary>
            Releases all resources used by the current Brotli encoder instance.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.EnsureNotDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the encoder has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the encoder has been disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.SetQuality(Nanook.GrindCore.CompressionType)">
            <summary>
            Sets the Brotli compression quality (level).
            </summary>
            <param name="level">The compression level to set.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the encoder is not valid or the parameter cannot be set.</exception>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.SetWindow">
            <summary>
            Sets the Brotli window size to the default value.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.SetWindow(System.Int32)">
            <summary>
            Sets the Brotli window size.
            </summary>
            <param name="window">The window size to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="window"/> is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the encoder is not valid or the parameter cannot be set.</exception>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.GetMaxCompressedLength(System.Int32)">
            <summary>
            Gets the maximum expected compressed length for the provided input size.
            </summary>
            <param name="inputSize">The input size to get the maximum expected compressed length from. Must be greater or equal than 0 and less or equal than <see cref="F:System.Int32.MaxValue" /> - 515.</param>
            <returns>A number representing the maximum compressed length for the provided input size.</returns>
            <remarks>Returns 1 if <paramref name="inputSize" /> is 0.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="inputSize"/> is less than 0 or greater than the maximum allowed input size.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.Flush(Nanook.GrindCore.CompressionBuffer,System.Int32@)">
            <summary>
            Compresses an empty buffer into <paramref name="outData"/>, ensuring that output is produced for all the processed input.
            An actual flush is performed when the input is depleted and there is enough space in the output for the remaining data.
            </summary>
            <param name="outData">When this method returns, a buffer where the compressed data will be stored.</param>
            <param name="bytesWritten">When this method returns, the total number of bytes that were written to <paramref name="outData"/>.</param>
            <returns>One of the enumeration values that describes the status with which the operation finished.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.EncodeData(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Compresses a buffer into an output buffer.
            </summary>
            <param name="inData">A buffer containing the input data to compress.</param>
            <param name="outData">When this method returns, a buffer where the compressed data is stored.</param>
            <param name="bytesConsumed">When this method returns, the total number of bytes that were read from <paramref name="inData"/>.</param>
            <param name="bytesWritten">When this method returns, the total number of bytes that were written to <paramref name="outData"/>.</param>
            <param name="isFinalBlock"><see langword="true"/> to finalize the internal stream, which prevents adding more input data when this method returns; <see langword="false"/> to allow the encoder to postpone the production of output until it has processed enough input.</param>
            <returns>One of the enumeration values that describes the status with which the operation finished.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliEncoder.EncodeData(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Int32@,System.Int32@,Nanook.GrindCore.Brotli.BrotliEncoderOperation)">
            <summary>
            Compresses a buffer into an output buffer using the specified encoder operation.
            </summary>
            <param name="inData">A buffer containing the input data to compress.</param>
            <param name="outData">When this method returns, a buffer where the compressed data is stored.</param>
            <param name="bytesConsumed">When this method returns, the total number of bytes that were read from <paramref name="inData"/>.</param>
            <param name="bytesWritten">When this method returns, the total number of bytes that were written to <paramref name="outData"/>.</param>
            <param name="operation">The encoder operation to perform.</param>
            <returns>One of the enumeration values that describes the status with which the operation finished.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="inData"/> or <paramref name="outData"/> is not at the correct position.</exception>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.BrotliStream">
            <summary>
            Provides methods and properties used to compress and decompress streams by using the Brotli data format specification.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Brotli.BrotliStream.BufferSizeInput">
            <summary>
            Gets the input buffer size for Brotli operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Brotli.BrotliStream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for Brotli operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Brotli.BrotliStream"/> class by using the specified stream and compression options.
            </summary>
            <param name="stream">The stream to which compressed data is written or from which data to decompress is read.</param>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliStream.tryDecompress(Nanook.GrindCore.CompressionBuffer,System.Int32@,System.Int32@)">
            <summary>
            Attempts to decompress data from the internal buffer into the output buffer.
            </summary>
            <param name="outData">The output buffer to write decompressed data to.</param>
            <param name="allBytesConsumed">The total number of bytes consumed from the input buffer.</param>
            <param name="bytesWritten">The number of bytes written to the output buffer.</param>
            <returns>True if decompression produced output or completed; otherwise, false if more data is needed.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the decompressed data is invalid.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliStream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads and decompresses data from the underlying stream into the provided buffer.
            </summary>
            <param name="data">The buffer to read decompressed data into.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the underlying stream.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the output buffer.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the stream is in compression mode.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the stream is truncated or invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream is disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliStream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Writes compressed data from the provided buffer to the underlying stream.
            </summary>
            <param name="data">The buffer containing data to write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the stream is in decompression mode.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream is disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliStream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean)">
            <summary>
            Writes compressed data from the provided buffer to the underlying stream, with an option to indicate the final block.
            </summary>
            <param name="data">The buffer containing data to write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="isFinalBlock">Indicates whether this is the final block of data.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the stream is in decompression mode.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream is disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliStream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes the compression buffers and finalizes stream writes and positions.
            </summary>
            <param name="data">The buffer containing data to flush.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
            <exception cref="T:System.IO.InvalidDataException">The encoder ran into invalid data.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.BrotliStream.OnDispose">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Nanook.GrindCore.Brotli.BrotliStream"/> and optionally releases the managed resources.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.BrotliEncoderParameter">
            <summary>
            Specifies Brotli encoder parameters.
            <list type="bullet">
            <item><b>Mode</b> - BrotliEncoderMode enumerates all available values.</item>
            <item><b>Quality</b> - The main compression speed-density lever. The higher the quality, the slower the compression. Range is from <c>BROTLI_MIN_QUALITY</c> to <c>BROTLI_MAX_QUALITY</c>.</item>
            <item><b>LGWin</b> - Recommended sliding LZ77 window size. Encoder may reduce this value, e.g. if input is much smaller than window size. Range is from <c>BROTLI_MIN_WINDOW_BITS</c> to <c>BROTLI_MAX_WINDOW_BITS</c>.</item>
            <item><b>LGBlock</b> - Recommended input block size. Encoder may reduce this value, e.g. if input is much smaller than window size. Range is from <c>BROTLI_MIN_INPUT_BLOCK_BITS</c> to <c>BROTLI_MAX_INPUT_BLOCK_BITS</c>. Bigger input block size allows better compression, but consumes more memory.</item>
            <item><b>LCModeling</b> - Flag that affects usage of "literal context modeling" format feature. This flag is a "decoding-speed vs compression ratio" trade-off.</item>
            <item><b>SizeHint</b> - Estimated total input size for all BrotliEncoderCompressStream calls. The default value is 0, which means that the total input size is unknown.</item>
            </list>
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderParameter.Mode">
            <summary>Specifies the encoder mode.</summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderParameter.Quality">
            <summary>Specifies the compression quality (speed-density lever).</summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderParameter.LGWin">
            <summary>Specifies the sliding LZ77 window size.</summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderParameter.LGBlock">
            <summary>Specifies the input block size.</summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderParameter.LCModeling">
            <summary>Specifies the literal context modeling flag.</summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderParameter.SizeHint">
            <summary>Specifies the estimated total input size.</summary>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.BrotliEncoderOperation">
            <summary>
            Specifies the operation to perform with the Brotli encoder.
            <list type="bullet">
            <item><b>Process</b> - Process input. Encoder may postpone producing output, until it has processed enough input.</item>
            <item><b>Flush</b> - Produce output for all processed input. Actual flush is performed when input stream is depleted and there is enough space in output stream.</item>
            <item><b>Finish</b> - Finalize the stream. Adding more input data to finalized stream is impossible.</item>
            <item><b>EmitMetadata</b> - Emit metadata block to stream. Stream is soft-flushed before metadata block is emitted. Metadata block MUST be no longer than 16MiB.</item>
            </list>
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderOperation.Process">
            <summary>Process input. Encoder may postpone producing output until it has processed enough input.</summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderOperation.Flush">
            <summary>Produce output for all processed input. Actual flush is performed when input stream is depleted and there is enough space in output stream.</summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderOperation.Finish">
            <summary>Finalize the stream. Adding more input data to finalized stream is impossible.</summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.BrotliEncoderOperation.EmitMetadata">
            <summary>Emit metadata block to stream. Stream is soft-flushed before metadata block is emitted. Metadata block MUST be no longer than 16MiB.</summary>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.OperationStatus">
            <summary>
            Defines the values that can be returned from span-based operations that support processing of input contained in multiple discontiguous buffers.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.OperationStatus.Done">
            <summary>
            The entire input buffer has been processed and the operation is complete.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.OperationStatus.DestinationTooSmall">
            <summary>
            The input is partially processed, up to what could fit into the destination buffer.
            The caller can enlarge the destination buffer, slice the buffers appropriately, and retry.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.OperationStatus.NeedMoreData">
            <summary>
            The input is partially processed, up to the last valid chunk of the input that could be consumed.
            The caller can stitch the remaining unprocessed input with more data, slice the buffers appropriately, and retry.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Brotli.OperationStatus.InvalidData">
            <summary>
            The input contained invalid bytes which could not be processed. If the input is partially processed, the destination contains the partial result.
            This guarantees that no additional data appended to the input will make the invalid sequence valid.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.SafeBrotliEncoderHandle">
            <summary>
            Represents a safe handle for a native Brotli encoder instance.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.SafeBrotliEncoderHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Brotli.SafeBrotliEncoderHandle"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.SafeBrotliEncoderHandle.ReleaseHandle">
            <summary>
            Releases the native Brotli encoder instance.
            </summary>
            <returns><c>true</c> if the handle was released successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Nanook.GrindCore.Brotli.SafeBrotliEncoderHandle.IsInvalid">
            <summary>
            Gets a value indicating whether the handle is invalid.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Brotli.SafeBrotliEncoderHandle.Version">
            <summary>
            Gets or sets the compression version associated with this handle.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Brotli.SafeBrotliDecoderHandle">
            <summary>
            Represents a safe handle for a native Brotli decoder instance.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.SafeBrotliDecoderHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Brotli.SafeBrotliDecoderHandle"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Brotli.SafeBrotliDecoderHandle.ReleaseHandle">
            <summary>
            Releases the native Brotli decoder instance.
            </summary>
            <returns><c>true</c> if the handle was released successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Nanook.GrindCore.Brotli.SafeBrotliDecoderHandle.IsInvalid">
            <summary>
            Gets a value indicating whether the handle is invalid.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Brotli.SafeBrotliDecoderHandle.Version">
            <summary>
            Gets or sets the compression version associated with this handle.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.BufferPool">
            <summary>
            Provides a simple thread-safe pool for renting and returning byte arrays to reduce memory allocations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.BufferPool.#cctor">
            <summary>
            Initializes the <see cref="T:Nanook.GrindCore.BufferPool"/> class and starts the background cleanup thread.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.BufferPool.Rent(System.Int64)">
            <summary>
            Rents a byte array of the specified size from the pool, or allocates a new one if none are available.
            </summary>
            <param name="size">The minimum size of the buffer to rent.</param>
            <returns>A byte array of the requested size.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="size"/> is not positive.</exception>
        </member>
        <member name="M:Nanook.GrindCore.BufferPool.Return(System.Byte[])">
            <summary>
            Returns a byte array to the pool for reuse.
            </summary>
            <param name="buffer">The buffer to return. If null, the call is ignored.</param>
        </member>
        <member name="M:Nanook.GrindCore.BufferPool.CleanupStaleBuffers">
            <summary>
            Periodically removes stale buffers from the pool that have not been used for a threshold period.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.CancellableTask">
            <summary>
            Represents a cancellable task using a <see cref="T:System.Threading.CancellationToken"/> for supported frameworks.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CancellableTask.Token">
            <summary>
            Gets the associated <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CancellableTask.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.CancellableTask"/> struct with a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="cancellationToken">The cancellation token to associate with this task.</param>
        </member>
        <member name="P:Nanook.GrindCore.CancellableTask.IsCancellationRequested">
            <summary>
            Gets a value indicating whether cancellation has been requested for this task.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CancellableTask.ThrowIfCancellationRequested">
            <summary>
            Throws an <see cref="T:System.OperationCanceledException"/> if cancellation has been requested.
            </summary>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation has been requested.</exception>
        </member>
        <member name="T:Nanook.GrindCore.CompressionAlgorithm">
            <summary>
            Supported Compression Algorithms
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.CompressionBlock">
            <summary>
            Provides a base class for block-based compression and decompression operations.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionBlock.Options">
            <summary>
            Gets the compression options used by this block compression instance.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionBlock.CompressionType">
            <summary>
            Gets or sets the compression type for this block compression instance.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionBlock.Properties">
            <summary>
            Gets or sets the compression properties for this stream.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionBlock.RequiredCompressOutputSize">
            <summary>
            Gets the maximum required output buffer size for compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionBlock.Defaults">
            <summary>
            Gets the compression defaults for this block, e.g. Fastest, Optimal and SmallestSize levels.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.#ctor(Nanook.GrindCore.CompressionAlgorithm,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.CompressionBlock"/> class.
            </summary>
            <param name="defaultAlgorithm">The default algorithm, used when options.Version is not set to override it.</param>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the compression type is invalid.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Compresses data from the source block into the destination block.
            </summary>
            <param name="srcData">The source data block.</param>
            <param name="dstData">The destination data block.</param>
            <returns>The number of bytes written to the destination block.</returns>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Decompresses data from the source block into the destination block.
            </summary>
            <param name="srcData">The source data block.</param>
            <param name="dstData">The destination data block.</param>
            <returns>The number of bytes written to the destination block.</returns>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.OnDispose">
            <summary>
            Performs custom cleanup for managed resources.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.Decompress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses data from a source buffer to a destination buffer.
            </summary>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcOffset">The offset in the source buffer.</param>
            <param name="srcCount">The number of bytes to decompress from the source buffer.</param>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The offset in the destination buffer.</param>
            <param name="dstCount">The maximum number of bytes available in the destination buffer.</param>
            <returns>The number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="srcBuffer"/> or <paramref name="dstBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any offset or count is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of offset and count exceeds the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses data from a source buffer to a destination buffer.
            </summary>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcOffset">The offset in the source buffer.</param>
            <param name="srcCount">The number of bytes to compress from the source buffer.</param>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The offset in the destination buffer.</param>
            <param name="dstCount">The maximum number of bytes available in the destination buffer.</param>
            <returns>The number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="srcBuffer"/> or <paramref name="dstBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any offset or count is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of offset and count exceeds the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Nanook.GrindCore.CompressionBlock"/> class.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.CompressionBlock"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.DecompressAsync(System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <summary>
            Asynchronously decompresses data from a source memory region to a destination memory region.
            </summary>
            <param name="src">The source memory region.</param>
            <param name="dst">The destination memory region.</param>
            <returns>A task that represents the asynchronous decompress operation. The value of the result parameter contains the total number of bytes written to the destination.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="src"/> or <paramref name="dst"/> length is negative.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.CompressAsync(System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <summary>
            Asynchronously compresses data from a source memory region to a destination memory region.
            </summary>
            <param name="src">The source memory region.</param>
            <param name="dst">The destination memory region.</param>
            <returns>A task that represents the asynchronous compress operation. The value of the result parameter contains the total number of bytes written to the destination.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="src"/> or <paramref name="dst"/> length is negative.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.DisposeAsync">
            <summary>
            Asynchronously releases all resources used by the <see cref="T:Nanook.GrindCore.CompressionBlock"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.DecompressAsync(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously decompresses data from a source buffer to a destination buffer.
            </summary>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcOffset">The offset in the source buffer.</param>
            <param name="srcCount">The number of bytes to decompress from the source buffer.</param>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The offset in the destination buffer.</param>
            <param name="dstCount">The maximum number of bytes available in the destination buffer.</param>
            <returns>A task that represents the asynchronous decompress operation. The value of the result parameter contains the total number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="srcBuffer"/> or <paramref name="dstBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any offset or count is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of offset and count exceeds the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlock.CompressAsync(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously compresses data from a source buffer to a destination buffer.
            </summary>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcOffset">The offset in the source buffer.</param>
            <param name="srcCount">The number of bytes to compress from the source buffer.</param>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The offset in the destination buffer.</param>
            <param name="dstCount">The maximum number of bytes available in the destination buffer.</param>
            <returns>A task that represents the asynchronous compress operation. The value of the result parameter contains the total number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="srcBuffer"/> or <paramref name="dstBuffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any offset or count is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of offset and count exceeds the buffer length.</exception>
        </member>
        <member name="T:Nanook.GrindCore.CompressionBlockFactory">
            <summary>
            Factory class for creating <see cref="T:Nanook.GrindCore.CompressionBlock"/> instances for various compression algorithms.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlockFactory.Create(Nanook.GrindCore.CompressionAlgorithm,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Creates a <see cref="T:Nanook.GrindCore.CompressionBlock"/> for the specified algorithm and options.
            </summary>
            <param name="algorithm">The compression algorithm to use.</param>
            <param name="options">The compression options to use.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionBlock"/> instance for the specified algorithm.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlockFactory.Create(Nanook.GrindCore.CompressionAlgorithm,Nanook.GrindCore.CompressionType,System.Int32,System.Boolean,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Creates a <see cref="T:Nanook.GrindCore.CompressionBlock"/> for the specified algorithm, compression type, block size, and version.
            </summary>
            <param name="algorithm">The compression algorithm to use.</param>
            <param name="type">The compression type to use.</param>
            <param name="blockSize">The block size to use.</param>
            <param name="leaveOpen">Whether to leave the underlying stream open after use. Defaults to false.</param>
            <param name="version">The compression version to use, or null for default.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionBlock"/> instance for the specified algorithm.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBlockFactory.create(Nanook.GrindCore.CompressionAlgorithm,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Internal helper to create a <see cref="T:Nanook.GrindCore.CompressionBlock"/> for the specified algorithm and options.
            </summary>
            <param name="algorithm">The compression algorithm to use.</param>
            <param name="options">The compression options to use.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionBlock"/> instance for the specified algorithm.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm is not supported.</exception>
        </member>
        <member name="T:Nanook.GrindCore.CompressionBuffer">
            <summary>
            A lightweight class to wrap an output buffer for compression and decompression operations.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionBuffer.Data">
            <summary>
            Gets the underlying data buffer.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionBuffer.Pos">
            <summary>
            Gets or sets the current read/write position in the buffer.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionBuffer.Size">
            <summary>
            Gets or sets the current size of valid data in the buffer.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionBuffer.MaxSize">
            <summary>
            Gets the Maximum size that Size can be.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.CompressionBuffer"/> class with the specified buffer size.
            </summary>
            <param name="maxSize">The size of the buffer to allocate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxSize"/> is not positive.</exception>
        </member>
        <member name="P:Nanook.GrindCore.CompressionBuffer.AvailableRead">
            <summary>
            Gets the number of bytes available to read from the buffer.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionBuffer.AvailableWrite">
            <summary>
            Gets the number of bytes available to write to the buffer. Includes already Read bytes as space will be reused.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.Dispose">
            <summary>
            Releases the buffer back to the pool.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.Tidy">
            <summary>
            Manual tidy used to ensure free space starts at Size, by moving data to the start.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.Read(System.Int32)">
            <summary>
            Reads up to <paramref name="length"/> bytes from the buffer and advances the position.
            </summary>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="length"/> is negative.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads up to <paramref name="length"/> bytes from the buffer into the specified array and advances the position.
            </summary>
            <param name="data">The destination array, or null to skip copying.</param>
            <param name="offset">The offset in the destination array at which to begin writing.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="data"/> is not null and the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the array length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.Write(System.Int32)">
            <summary>
            Writes up to <paramref name="length"/> bytes to the buffer from the specified array and advances the size.
            </summary>
            <param name="length">The number of bytes to write.</param>
            <returns>The number of bytes actually written.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="length"/> is negative.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes up to <paramref name="length"/> bytes to the buffer from the specified array and advances the size.
            </summary>
            <param name="data">The source array, or null to skip copying.</param>
            <param name="offset">The offset in the source array at which to begin reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>The number of bytes actually written.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="data"/> is not null and the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the array length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.Read(System.Span{System.Byte})">
            <summary>
            Reads data from the buffer into the specified span and advances the position.
            </summary>
            <param name="data">The destination span.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Nanook.GrindCore.CompressionBuffer.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes data from the specified span to the buffer and advances the size.
            </summary>
            <param name="data">The source span.</param>
            <returns>The number of bytes actually written.</returns>
        </member>
        <member name="T:Nanook.GrindCore.CompressionDefaults">
            <summary>
            Provides default compression levels and version information for a given <see cref="T:Nanook.GrindCore.CompressionAlgorithm"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionDefaults.#ctor(Nanook.GrindCore.CompressionAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.CompressionDefaults"/> class using the specified algorithm and the latest version.
            </summary>
            <param name="algorithm">The compression algorithm.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionDefaults.#ctor(Nanook.GrindCore.CompressionAlgorithm,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.CompressionDefaults"/> class using the specified algorithm and version.
            </summary>
            <param name="algorithm">The compression algorithm.</param>
            <param name="version">The compression version, or <c>null</c> to use the latest version.</param>
        </member>
        <member name="P:Nanook.GrindCore.CompressionDefaults.LevelFastest">
            <summary>
            Gets the recommended fastest compression level for the algorithm.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionDefaults.LevelOptimal">
            <summary>
            Gets the recommended optimal compression level for the algorithm.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionDefaults.LevelSmallestSize">
            <summary>
            Gets the recommended smallest size compression level for the algorithm.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionDefaults.Version">
            <summary>
            Gets the default or specified compression version for the algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.CompressionOptions">
            <summary>
            Represents options that apply to all compression streams and blocks.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.Type">
            <summary>
            Gets or sets the compression type. Can be <see cref="F:Nanook.GrindCore.CompressionType.Decompress"/> or a compression level.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.LeaveOpen">
            <summary>
            Gets or sets a value indicating whether the base stream should be left open after the compression stream is disposed. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.Version">
            <summary>
            Gets or sets the version of the compression algorithm to use (e.g., ZLib supports v1.3.1 and Ng 2.2.1).
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.ThreadCount">
            <summary>
            Gets or sets the thread count for supported algorithms.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.BlockSize">
            <summary>
            Gets or sets the block size. For LZMA2, -1 will compress in full solid mode. 
            If threads &gt; 1 and BlockSize != -1, then the block is divided by the number of threads and processed in subblocks.
            If not -1, this will override ProcessSizeMin and BufferSize.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.PositionLimit">
            <summary>
            Gets or sets the write limit during compression and the read limit during decompression. 
            This corresponds to the Position property of CompressionStream.If null, no limit is applied.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.PositionFullSizeLimit">
            <summary>
            Gets or sets the buffer read limit during compression and the buffer write limit during decompression. 
            This corresponds to the PositionFullSize property of CompressionStream. If null, no limit is applied.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.InitProperties">
            <summary>
            Gets or sets the properties required for processing (e.g., LZMA/2 requires these for decoding; they can be read from the encoder and stored).
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionOptions.BufferSize">
            <summary>
            Gets or sets the buffer size. Compression/Decompression will be performed when the internal output buffer is at least this size.
            Useful when using <see cref="M:System.IO.Stream.WriteByte(System.Byte)"/> etc. This is the maximum size of the output buffer and will be used where possible.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionOptions.DefaultDecompress">
            <summary>
            Returns a <see cref="T:Nanook.GrindCore.CompressionOptions"/> instance configured for decompression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionOptions.DefaultCompressOptimal">
            <summary>
            Returns a <see cref="T:Nanook.GrindCore.CompressionOptions"/> instance configured for optimal compression.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.CompressionReaderStream">
            <summary>
            Wraps a source stream for use with GrindCore compression classes, providing enhanced buffering and position management.
            This stream enables efficient resetting of the stream position when overreading occurs by using an internal buffer,
            reducing the performance cost of frequent small reads. It supports non-disposing behavior, stream limits, and accurate
            position tracking. While not required by GrindCore compression streams, using this class ensures that stream positions
            remain accurate, allowing other code to reliably resume operations from the correct position.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionReaderStream.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Creates a new <see cref="T:Nanook.GrindCore.CompressionReaderStream"/> that wraps the specified stream with internal buffering and position management,
            enabling efficient reading and accurate position tracking for GrindCore compression operations.
            </summary>
            <param name="stream">The source <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="leaveOpen">If <c>true</c>, the underlying stream remains open after this stream is disposed; otherwise, it is closed.</param>
            <param name="bufferSize">The size of the internal buffer, in bytes, used to optimize read operations and allow position resets.</param>
            <param name="limit">The maximum number of bytes to read from the stream, or <c>null</c> for no limit. Used to enforce a read boundary.</param>
        </member>
        <member name="T:Nanook.GrindCore.CompressionStream">
            <summary>
            Provides a base stream for compression and decompression operations.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionStream.LeaveOpen">
            <summary>
            Gets a value indicating whether the base stream should be left open after the compression stream is disposed.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionStream.IsCompress">
            <summary>
            Gets a value indicating whether this stream is in compression mode.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionStream.CompressionType">
            <summary>
            Gets the compression type for this stream.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.BaseStream">
            <summary>
            Gets the underlying base stream.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionStream.BufferThreshold">
            <summary>
            Gets the threshold for the internal buffer.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.Defaults">
            <summary>
            Gets the compression defaults for this stream.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.PositionFullSize">
            <summary>
            Gets the total number of bytes read or written to decompressed byte arrays. The Decompressed/FullSize position, Position holds the Compressed position.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.Properties">
            <summary>
            Gets or sets the compression properties for this stream.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.#ctor(System.Boolean,System.IO.Stream,Nanook.GrindCore.CompressionAlgorithm,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.CompressionStream"/> class.
            </summary>
            <param name="positionSupport">Indicates if position support is enabled.</param>
            <param name="stream">The base stream to wrap.</param>
            <param name="defaultAlgorithm">The default algorithm, used when options.Version is not set to override it.</param>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the stream does not support required operations or if compression type is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the buffer size is not positive.</exception>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.Version">
            <summary>
            Gets the compression version used by this stream.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.BufferSizeInput">
            <summary>
            Gets the input buffer size for this stream.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionStream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for this stream.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads data from the underlying stream into the provided buffer.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Writes data from the provided buffer to the underlying stream.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes the compression buffers and finalizes stream writes and positions.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.OnDispose">
            <summary>
            Performs custom cleanup for managed resources.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.onFlush(Nanook.GrindCore.CancellableTask,System.Boolean,System.Boolean)">
            <summary>
            Flushes compression buffers and finalizes stream writes and positions. 
            If not called from <see cref="M:Nanook.GrindCore.CompressionStream.Flush"/>, then called from <see cref="M:Nanook.GrindCore.CompressionStream.onDispose"/>.
            Best practice is to call flush if the object positions are to be read as the object may be garbage collected.
            </summary>
            <param name="cancel">A cancellation task.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.onDispose">
            <summary>
            Only called once from Dispose(), will flush if onFlush was not already called.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.WriteByte(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the stream.</param>
            <param name="count">The maximum number of bytes to be read from the stream.</param>
            <returns>The total number of bytes read into the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the stream.</param>
            <param name="count">The number of bytes to be written to the stream.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.Complete">
            <summary>
            Completes the compression or decompression operation, flushing all buffers and finalizing the stream without disposing anything.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.Close">
            <summary>
            Closes the current stream and releases any resources associated with the current stream.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Nanook.GrindCore.CompressionStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">The region of memory to write the data into.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the result parameter contains the total number of bytes read into the buffer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="buffer"/> length is negative.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">The region of memory to write data from.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="buffer"/> length is negative.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.CompleteAsync">
            <summary>
            Asynchronously completes the compression or decompression operation, flushing all buffers and finalizing the stream without disposing anything.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.DisposeAsync">
            <summary>
            Asynchronously releases the unmanaged resources used by the <see cref="T:Nanook.GrindCore.CompressionStream"/> and optionally releases the managed resources.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the stream.</param>
            <param name="count">The maximum number of bytes to be read from the stream.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the result parameter contains the total number of bytes read into the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the stream.</param>
            <param name="count">The number of bytes to be written to the stream.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous flush operation.</returns>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStream.CompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously completes the compression or decompression operation, flushing all buffers and finalizing the stream without disposing anything.
            </summary>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous complete operation.</returns>
        </member>
        <member name="T:Nanook.GrindCore.CompressionStreamFactory">
            <summary>
            Factory class for creating <see cref="T:Nanook.GrindCore.CompressionStream"/> instances for various compression algorithms.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStreamFactory.Create(Nanook.GrindCore.CompressionAlgorithm,System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Creates a <see cref="T:Nanook.GrindCore.CompressionStream"/> for the specified algorithm, stream, and options.
            </summary>
            <param name="algorithm">The compression algorithm to use.</param>
            <param name="stream">The base stream to wrap.</param>
            <param name="options">The compression options to use.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionStream"/> instance for the specified algorithm.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStreamFactory.Create(Nanook.GrindCore.CompressionAlgorithm,System.IO.Stream,Nanook.GrindCore.CompressionType,System.Boolean,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Creates a <see cref="T:Nanook.GrindCore.CompressionStream"/> for the specified algorithm, stream, compression type, and version.
            </summary>
            <param name="algorithm">The compression algorithm to use.</param>
            <param name="stream">The base stream to wrap.</param>
            <param name="type">The compression type to use.</param>
            <param name="leaveOpen">Whether to leave the underlying stream open after use. Defaults to false.</param>
            <param name="version">The compression version to use, or null for default.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionStream"/> instance for the specified algorithm.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionStreamFactory.create(Nanook.GrindCore.CompressionAlgorithm,System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Internal helper to create a <see cref="T:Nanook.GrindCore.CompressionStream"/> for the specified algorithm, stream, and options.
            </summary>
            <param name="algorithm">The compression algorithm to use.</param>
            <param name="stream">The base stream to wrap.</param>
            <param name="options">The compression options to use.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionStream"/> instance for the specified algorithm.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm is not supported.</exception>
        </member>
        <member name="T:Nanook.GrindCore.CompressionType">
            <summary>
            Specifies values that indicate decompression or compression level.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionType.SmallestSize">
            <summary>
            The compression operation should create output as small as possible, even if the operation takes a longer time to complete.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionType.Fastest">
            <summary>
            The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionType.Optimal">
            <summary>
            The compression operation should balance compression speed and output size.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionType.Decompress">
            <summary>
            Decompress.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionType.NoCompression">
            <summary>
            No compression should be performed on the data, some algorithms seemingly still compress the data.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionType.Level0">
            Named Levels (not supported by all algorithms).
        </member>
        <member name="T:Nanook.GrindCore.CopyVersion">
            <summary>
            Specifies supported versions for the Copy algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.ZLibVersion">
            <summary>
            Specifies supported versions for the ZLib algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.ZLibNgVersion">
            <summary>
            Specifies supported versions for the ZLibNg algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.BrotliVersion">
            <summary>
            Specifies supported versions for the Brotli algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.LzmaVersion">
            <summary>
            Specifies supported versions for the LZMA algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma2Version">
            <summary>
            Specifies supported versions for the LZMA2 algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2Version">
            <summary>
            Specifies supported versions for the FastLzma2 algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lz4Version">
            <summary>
            Specifies supported versions for the LZ4 algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.ZStdVersion">
            <summary>
            Specifies supported versions for the ZStd algorithm.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.CompressionVersion">
            <summary>
            Represents a version for a specific compression algorithm.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.CompressionVersion.LATEST">
            <summary>
            Gets a string representing the latest version.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.enumStringToVersionString(System.String)">
            <summary>
            Converts an enum name to a version string (e.g., v1_2_3 to 1.2.3).
            </summary>
            <param name="enumName">The enum name.</param>
            <returns>The version string.</returns>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Create(Nanook.GrindCore.CompressionAlgorithm)">
            <summary>
            Creates a <see cref="T:Nanook.GrindCore.CompressionVersion"/> for the specified algorithm and the latest version.
            </summary>
            <param name="algorithm">The compression algorithm.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionVersion"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm is unknown or not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Create(Nanook.GrindCore.CompressionAlgorithm,System.String)">
            <summary>
            Creates a <see cref="T:Nanook.GrindCore.CompressionVersion"/> for the specified algorithm and version string.
            </summary>
            <param name="algorithm">The compression algorithm.</param>
            <param name="version">The version string.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionVersion"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm or version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.CopyLatest">
            <summary>
            Gets the latest version for the Copy algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Copy(Nanook.GrindCore.CopyVersion)">
            <summary>
            Gets a specific version for the Copy algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.BrotliLatest">
            <summary>
            Gets the latest version for the Brotli algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Brotli(Nanook.GrindCore.BrotliVersion)">
            <summary>
            Gets a specific version for the Brotli algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.ZLibLatest">
            <summary>
            Gets the latest version for the ZLib algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.ZLib(Nanook.GrindCore.ZLibVersion)">
            <summary>
            Gets a specific version for the ZLib algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.ZLibNgLatest">
            <summary>
            Gets the latest version for the ZLibNg algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.ZLibNg(Nanook.GrindCore.ZLibNgVersion)">
            <summary>
            Gets a specific version for the ZLibNg algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.LzmaLatest">
            <summary>
            Gets the latest version for the LZMA algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Lzma(Nanook.GrindCore.LzmaVersion)">
            <summary>
            Gets a specific version for the LZMA algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Lzma2Latest">
            <summary>
            Gets the latest version for the LZMA2 algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Lzma2(Nanook.GrindCore.Lzma2Version)">
            <summary>
            Gets a specific version for the LZMA2 algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.FastLzma2Latest">
            <summary>
            Gets the latest version for the FastLzma2 algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.FastLzma2(Nanook.GrindCore.FastLzma2Version)">
            <summary>
            Gets a specific version for the FastLzma2 algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Lz4Latest">
            <summary>
            Gets the latest version for the LZ4 algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.Lz4(Nanook.GrindCore.Lz4Version)">
            <summary>
            Gets a specific version for the LZ4 algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.ZStdLatest">
            <summary>
            Gets the latest version for the ZStd algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.ZStd(Nanook.GrindCore.ZStdVersion)">
            <summary>
            Gets a specific version for the ZStd algorithm.
            </summary>
            <param name="version">The version enum value.</param>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.#ctor">
            <summary>
            Private constructor to prevent direct instantiation.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.CompressionVersion.create(Nanook.GrindCore.CompressionAlgorithm,System.String)">
            <summary>
            Internal factory for creating a <see cref="T:Nanook.GrindCore.CompressionVersion"/> for the specified algorithm and version string.
            </summary>
            <param name="algorithm">The compression algorithm.</param>
            <param name="version">The version string.</param>
            <returns>A <see cref="T:Nanook.GrindCore.CompressionVersion"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the algorithm or version is not supported.</exception>
        </member>
        <member name="P:Nanook.GrindCore.CompressionVersion.Algorithm">
            <summary>
            Gets the compression algorithm for this version.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionVersion.Version">
            <summary>
            Gets the version string for this compression version.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.CompressionVersion.Index">
            <summary>
            Internal id for fast version lookup.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Copy.CopyBlock">
            <summary>
            Provides a block-based Copy with no compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Copy.CopyBlock.RequiredCompressOutputSize">
            <summary>
            Gets the required output buffer size for compression, which is equal to the input block size for Copy.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyBlock.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Copy.CopyBlock"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> or <c>options.BlockSize</c> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyBlock.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Copies the source data block to the destination data block (no compression).
            </summary>
            <param name="srcData">The source data block.</param>
            <param name="dstData">The destination data block.</param>
            <returns>The number of bytes written to the destination block.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyBlock.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Copies the source data block to the destination data block (no decompression).
            </summary>
            <param name="srcData">The source data block.</param>
            <param name="dstData">The destination data block.</param>
            <returns>The number of bytes written to the destination block.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyBlock.OnDispose">
            <summary>
            Releases any resources used by the <see cref="T:Nanook.GrindCore.Copy.CopyBlock"/>. No resources to release for Copy.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Copy.CopyStream">
            <summary>
            A non-compression stream that performs a direct stream copy. 
            This allows a stream copy to work seamlessly with this library and the <see cref="T:Nanook.GrindCore.CompressionStream"/> base.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Copy.CopyStream.BufferSizeInput">
            <summary>
            Gets the input buffer size for copy operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Copy.CopyStream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for copy operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Copy.CopyStream"/> class.
            </summary>
            <param name="stream">The stream to copy to or from.</param>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyStream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads data from the stream and writes it to the buffer. Position is updated with the running total of bytes processed from the source stream.
            </summary>
            <param name="inData">The buffer to read data into.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the underlying stream.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the buffer.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in decompression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyStream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Writes data from the buffer to the stream. Position is updated with the running total of bytes processed from the source stream.
            </summary>
            <param name="outData">The buffer containing data to write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in compression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyStream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes any remaining data in the buffer to the stream.
            </summary>
            <param name="outData">The buffer containing data to flush.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
        </member>
        <member name="M:Nanook.GrindCore.Copy.CopyStream.OnDispose">
            <summary>
            Disposes the <see cref="T:Nanook.GrindCore.Copy.CopyStream"/> and its resources.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.DataBlock">
            <summary>
            Represents a block of data for compression or decompression operations compatible with span and all versions of dotnet, using spans for efficient memory access.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.DataBlock.Data">
            <summary>
            Gets the readonly memory span for this data block.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.#ctor(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DataBlock"/> struct from a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <param name="span">The source span.</param>
            <param name="offset">The offset within the span.</param>
            <param name="length">The length of the data block.</param>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DataBlock"/> struct from a <see cref="T:System.ReadOnlySpan`1"/> covering the entire span.
            </summary>
            <param name="span">The source span.</param>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.#ctor(System.Span{System.Byte},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DataBlock"/> struct from a <see cref="T:System.Span`1"/>.
            </summary>
            <param name="span">The source span.</param>
            <param name="offset">The offset within the span.</param>
            <param name="length">The length of the data block.</param>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.#ctor(System.Span{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DataBlock"/> struct from a <see cref="T:System.Span`1"/> covering the entire span.
            </summary>
            <param name="span">The source span.</param>
        </member>
        <member name="P:Nanook.GrindCore.DataBlock.Offset">
            <summary>
            Gets the offset within the underlying span or array.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DataBlock.Length">
            <summary>
            Gets the length of the data block.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.AsWritableSpan">
            <summary>
            Exposes the mutable span for writing, if available.
            </summary>
            <returns>The writable <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.Read(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from this block into a target byte array.
            </summary>
            <param name="sourceOffset">The offset within this block to start reading from.</param>
            <param name="target">The target byte array.</param>
            <param name="targetOffset">The offset within the target array to start writing to.</param>
            <param name="length">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the source or target range is out of bounds.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.Read(System.Int32,Nanook.GrindCore.CompressionBuffer,System.Int32)">
            <summary>
            Reads data from this block and writes it to a <see cref="T:Nanook.GrindCore.CompressionBuffer"/>.
            </summary>
            <param name="sourceOffset">The offset within this block to start reading from.</param>
            <param name="buffer">The target <see cref="T:Nanook.GrindCore.CompressionBuffer"/>.</param>
            <param name="length">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the source range is out of bounds.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.Write(System.Int32,Nanook.GrindCore.CompressionBuffer,System.Int32)">
            <summary>
            Writes data from a <see cref="T:Nanook.GrindCore.CompressionBuffer"/> into this block.
            </summary>
            <param name="sourceOffset">The offset within this block to start writing to.</param>
            <param name="buffer">The source <see cref="T:Nanook.GrindCore.CompressionBuffer"/>.</param>
            <param name="length">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Thrown if this block is not writable.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the source range is out of bounds.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DataBlock.CopyTo(Nanook.GrindCore.DataBlock,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from this block to another <see cref="T:Nanook.GrindCore.DataBlock"/>.
            </summary>
            <param name="target">The target <see cref="T:Nanook.GrindCore.DataBlock"/>.</param>
            <param name="sourceOffset">The offset within this block to start reading from.</param>
            <param name="targetOffset">The offset within the target block to start writing to.</param>
            <param name="length">The number of bytes to copy.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any offset or length is negative, or if the source or target range is out of bounds.</exception>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.DeflateBlock">
            <summary>
            Provides a block-based implementation of the Deflate (and ZLib/DeflateNg) compression algorithm.
            Supports multiple versions and window bit settings.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.DeflateBlock.RequiredCompressOutputSize">
            <summary>
            Gets the required output buffer size for compression, including Deflate overhead.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateBlock.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateBlock"/> class using the default DeflateNg algorithm and default window bits.
            </summary>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> or <c>options.BlockSize</c> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateBlock.#ctor(Nanook.GrindCore.CompressionAlgorithm,Nanook.GrindCore.CompressionOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateBlock"/> class with the specified algorithm, options, and window bits.
            </summary>
            <param name="defaultAlgorithm">The default compression algorithm.</param>
            <param name="options">The compression options to use.</param>
            <param name="windowBits">The window bits to use for Deflate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> or <c>options.BlockSize</c> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateBlock.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Compresses the source data block into the destination data block using Deflate or ZLib/DeflateNg.
            </summary>
            <param name="srcData">The source data block to compress.</param>
            <param name="dstData">The destination data block to write compressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateBlock.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Decompresses the source data block into the destination data block using Deflate or ZLib/DeflateNg.
            </summary>
            <param name="srcData">The source data block to decompress.</param>
            <param name="dstData">The destination data block to write decompressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateBlock.OnDispose">
            <summary>
            Releases any resources used by the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateBlock"/>. No resources to release for Deflate.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.DeflateDecoder">
            <summary>
            Provides a wrapper around the ZLib decompression API for block and stream decompression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.#ctor(Nanook.GrindCore.CompressionVersion,System.Int32,System.Int64)">
            <summary>
            Initializes the DeflateDecoder with the given windowBits size and optional uncompressed size.
            </summary>
            <param name="version">The compression version to use.</param>
            <param name="windowBits">The window bits parameter for the inflater.</param>
            <param name="uncompressedSize">The expected uncompressed size, or -1 if unknown.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="windowBits"/> is out of range.</exception>
            <exception cref="T:Nanook.GrindCore.DeflateZLib.ZLibException">Thrown if the underlying zlib stream cannot be created.</exception>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.DeflateDecoder.AvailableOutput">
            <summary>
            Gets the number of bytes available for output from the underlying zlib stream.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.Finished">
            <summary>
            Returns true if the end of the stream has been reached.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.DecodeData(Nanook.GrindCore.CompressionBuffer,System.Int32)">
            <summary>
            Inflates data from the stream into the provided <see cref="T:Nanook.GrindCore.CompressionBuffer"/>.
            </summary>
            <param name="outData">The buffer to write decompressed data to.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the buffer.</returns>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.inflateVerified(System.Byte*,System.Int32)">
            <summary>
            Inflates data into the provided buffer, handling uncompressed size and releasing input buffer handles as needed.
            </summary>
            <param name="bufPtr">Pointer to the output buffer.</param>
            <param name="length">The number of bytes to inflate.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.readOutput(System.Byte*,System.Int32,System.Int32@)">
            <summary>
            Reads output from the zlib stream into the provided buffer.
            </summary>
            <param name="bufPtr">Pointer to the output buffer.</param>
            <param name="length">The number of bytes to read.</param>
            <param name="bytesRead">The number of bytes actually read.</param>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.resetStreamForLeftoverInput">
            <summary>
            If this stream has some input leftover that hasn't been processed, checks if it is another GZip file concatenated with this one.
            Returns false if the leftover input is another GZip data stream.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.IsGzipStream">
            <summary>
            Returns true if the stream is using GZip headers.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.NeedsInput">
            <summary>
            Returns true if the decoder needs more input data.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.NonEmptyInput">
            <summary>
            Returns true if any non-empty input has been provided.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.SetInput(Nanook.GrindCore.CompressionBuffer)">
            <summary>
            Sets the input buffer for decompression.
            </summary>
            <param name="inputBuffer">The buffer containing input data.</param>
            <exception cref="T:System.ArgumentException">Thrown if input is not needed or a buffer handle is already allocated.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.Dispose">
            <summary>
            Disposes the decoder and releases all resources.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.Finalize">
            <summary>
            Finalizer to ensure resources are released.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.dispose(System.Boolean)">
            <summary>
            Disposes the decoder, optionally releasing managed resources.
            </summary>
            <param name="disposing">True to release managed resources; otherwise, false.</param>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.inflateInit(System.Int32)">
            <summary>
            Creates the ZStream that will handle inflation.
            </summary>
            <param name="windowBits">The window bits parameter for the inflater.</param>
            <exception cref="T:Nanook.GrindCore.DeflateZLib.ZLibException">Thrown if the underlying zlib stream cannot be created or initialized.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.readInflateOutput(System.Byte*,System.Int32,Nanook.GrindCore.Interop.ZLib.FlushCode,System.Int32@)">
            <summary>
            Wrapper around the ZLib inflate function, configuring the stream appropriately.
            </summary>
            <param name="bufPtr">Pointer to the output buffer.</param>
            <param name="length">The number of bytes to read.</param>
            <param name="flushCode">The flush code to use.</param>
            <param name="bytesRead">The number of bytes actually read.</param>
            <returns>The error code returned by the inflate operation.</returns>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.inflate(Nanook.GrindCore.Interop.ZLib.FlushCode)">
            <summary>
            Wrapper around the ZLib inflate function.
            </summary>
            <param name="flushCode">The flush code to use.</param>
            <returns>The error code returned by the inflate operation.</returns>
            <exception cref="T:Nanook.GrindCore.DeflateZLib.ZLibException">Thrown if a fatal error occurs in the underlying zlib library.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the input data is corrupted or invalid.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateDecoder.deallocateInputBufferHandle">
            <summary>
            Frees the GCHandle being used to store the input buffer.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.DeflateDecoder.IsInputBufferHandleAllocated">
            <summary>
            Gets a value indicating whether the input buffer handle is currently allocated.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.DeflateEncoder">
            <summary>
            Provides a wrapper around the ZLib compression API for block and stream compression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.#ctor(Nanook.GrindCore.CompressionVersion,Nanook.GrindCore.CompressionType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateEncoder"/> class with the specified version, compression level, and window bits.
            </summary>
            <param name="version">The compression version to use.</param>
            <param name="compressionLevel">The compression level to use.</param>
            <param name="windowBits">The window bits parameter for the deflater.</param>
            <exception cref="T:Nanook.GrindCore.DeflateZLib.ZLibException">Thrown if the underlying zlib stream cannot be created or initialized.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.Finalize">
            <summary>
            Finalizer to ensure resources are released.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateEncoder"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateEncoder"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.NeedsInput">
            <summary>
            Returns true if the encoder needs more input data.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.SetInput(System.Byte*,System.Int32)">
            <summary>
            Sets the input buffer for compression.
            </summary>
            <param name="inputBufferPtr">Pointer to the input buffer.</param>
            <param name="count">The number of bytes to read from the input buffer.</param>
            <exception cref="T:System.ArgumentException">Thrown if the encoder is not ready for new input.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.EncodeData(Nanook.GrindCore.CompressionBuffer)">
            <summary>
            Compresses data from the input buffer into the output buffer.
            </summary>
            <param name="outData">The buffer to write compressed data to.</param>
            <returns>The number of bytes written to the output buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="outData"/> is not at the correct position.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.readDeflateOutput(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.Interop.ZLib.FlushCode,System.Int32@)">
            <summary>
            Reads compressed output from the encoder into the output buffer using the specified flush code.
            </summary>
            <param name="outData">The buffer to write compressed data to.</param>
            <param name="flushCode">The flush code to use.</param>
            <param name="bytesRead">The number of bytes written to the output buffer.</param>
            <returns>The error code returned by the deflate operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="outData"/> is not at the correct position.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.Finish(Nanook.GrindCore.CompressionBuffer,System.Int32@)">
            <summary>
            Finishes the compression stream and writes any remaining compressed data to the output buffer.
            </summary>
            <param name="outData">The buffer to write compressed data to.</param>
            <param name="bytesRead">The number of bytes written to the output buffer.</param>
            <returns>True if the end of the stream was reached; otherwise, false.</returns>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.Flush(Nanook.GrindCore.CompressionBuffer,System.Int32@)">
            <summary>
            Flushes the encoder, writing any pending compressed data to the output buffer.
            </summary>
            <param name="outData">The buffer to write compressed data to.</param>
            <param name="bytesRead">The number of bytes written to the output buffer.</param>
            <returns>True if there was something to flush; otherwise, false.</returns>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.DeallocateInputBufferHandle">
            <summary>
            Deallocates the input buffer handle and resets the input pointers.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateEncoder.Deflate(Nanook.GrindCore.Interop.ZLib.FlushCode)">
            <summary>
            Performs the deflate operation using the specified flush code.
            </summary>
            <param name="flushCode">The flush code to use.</param>
            <returns>The error code returned by the deflate operation.</returns>
            <exception cref="T:Nanook.GrindCore.DeflateZLib.ZLibException">Thrown if a fatal error occurs in the underlying zlib library.</exception>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.DeflateStream">
            <summary>
            Provides a stream for Deflate (and ZLib/DeflateNg) compression and decompression, supporting both block and stream operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.DeflateStream.BufferSizeInput">
            <summary>
            Gets the input buffer size for Deflate operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.DeflateStream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for Deflate operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateStream"/> class with the specified stream and options, using the default window bits.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionAlgorithm,Nanook.GrindCore.CompressionOptions,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateStream"/> class with the specified stream, options, window bits, and optional uncompressed size.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="defaultAlgorithm">The default algorithm, used when options.Version is not set to override it.</param>
            <param name="options">The compression options to use.</param>
            <param name="windowBits">The window bits to use for Deflate.</param>
            <param name="uncompressedSize">The expected uncompressed size, or -1 if unknown.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateStream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads and decompresses data from the underlying stream into the provided buffer.
            </summary>
            <param name="data">The buffer to read decompressed data into.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the underlying stream.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the buffer.</returns>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the input stream is truncated or contains invalid data.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateStream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Compresses and writes data from the buffer to the underlying stream.
            </summary>
            <param name="outData">The buffer containing data to compress and write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateStream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes any remaining compressed data to the underlying stream.
            </summary>
            <param name="outData">The buffer containing data to flush.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateStream.OnDispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateStream"/>.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.DeflateStream.inflatorIsFinished">
            <summary>
            Returns true if the inflator has finished processing the stream.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.DeflateStream.writeDeflaterOutput(Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Writes any available compressed data from the deflater to the underlying stream.
            </summary>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWritten">The number of bytes written to the underlying stream.</param>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.ZLibException">
            <summary>
            Represents errors that occur when a ZLib operation returns an error code indicating an unrecoverable error.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.DeflateZLib.ZLibException._zlibErrorContext">
            <summary>
            Gets the context within zlib where the error occurred (e.g. the function name).
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.DeflateZLib.ZLibException._zlibErrorMessage">
            <summary>
            Gets the string provided by ZLib as error information (unlocalized).
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.DeflateZLib.ZLibException._zlibErrorCode">
            <summary>
            Gets the error code returned by a ZLib function that caused this exception.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibException.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.ZLibException"/> class with a specified error message, context, error code, and ZLib error message.
            </summary>
            <param name="message">A (localized) human readable error description.</param>
            <param name="zlibErrorContext">A description of the context within zlib where the error occurred (e.g. the function name).</param>
            <param name="zlibErrorCode">The error code returned by a ZLib function that caused this exception.</param>
            <param name="zlibErrorMessage">The string provided by ZLib as error information (unlocalized).</param>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.ZLibException"/> class.
            This constructor is provided for compliance with .NET Framework design patterns.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.ZLibException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            This constructor is provided for compliance with .NET Framework design patterns.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c>.</param>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.ZLibNative">
            <summary>
            Provides declarations for constants, P/Invokes, and basic tools for exposing the native Nanook.GrindCore.Native.dll (effectively, ZLib) library to managed code.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle">
            <summary>
            Represents a safe handle for a native ZLib stream, managing the lifetime and state of the underlying z_stream structure.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.State">
            <summary>
            Represents the initialization state of the ZLib stream.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.Version">
            <summary>
            Gets the compression version used by this stream.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.#ctor(Nanook.GrindCore.CompressionVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle"/> class for the specified compression version.
            </summary>
            <param name="version">The compression version to use.</param>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.InitializationState">
            <summary>
            Gets the current initialization state of the stream.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.ReleaseHandle">
            <inheritdoc/>
            <remarks>
            Releases the native z_stream and updates the state accordingly.
            </remarks>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.NextIn">
            <summary>
            Gets or sets the pointer to the next input byte.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.AvailIn">
            <summary>
            Gets or sets the number of bytes available at <see cref="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.NextIn"/>.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.NextOut">
            <summary>
            Gets or sets the pointer to the next output byte.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.AvailOut">
            <summary>
            Gets or sets the number of bytes available at <see cref="P:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.NextOut"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.EnsureNotDisposed">
            <summary>
            Throws if the stream has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the stream is disposed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.EnsureState(Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.State)">
            <summary>
            Throws if the stream is not in the required state.
            </summary>
            <param name="requiredState">The required state.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the stream is not in the required state.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.DeflateInit2_(Nanook.GrindCore.Interop.ZLib.CompressionLevel,System.Int32,System.Int32,Nanook.GrindCore.Interop.ZLib.CompressionStrategy)">
            <summary>
            Initializes the stream for deflate (compression) with the specified parameters.
            </summary>
            <param name="level">The compression level.</param>
            <param name="windowBits">The window bits parameter.</param>
            <param name="memLevel">The memory level parameter.</param>
            <param name="strategy">The compression strategy.</param>
            <returns>The error code returned by the native call.</returns>
            <exception cref="T:System.Exception">Thrown if the version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.Deflate(Nanook.GrindCore.Interop.ZLib.FlushCode)">
            <summary>
            Performs a deflate (compression) operation.
            </summary>
            <param name="flush">The flush code to use.</param>
            <returns>The error code returned by the native call.</returns>
            <exception cref="T:System.Exception">Thrown if the version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.DeflateEnd">
            <summary>
            Ends the deflate (compression) operation and releases resources.
            </summary>
            <returns>The error code returned by the native call.</returns>
            <exception cref="T:System.Exception">Thrown if the version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.InflateInit2_(System.Int32)">
            <summary>
            Initializes the stream for inflate (decompression) with the specified window bits.
            </summary>
            <param name="windowBits">The window bits parameter.</param>
            <returns>The error code returned by the native call.</returns>
            <exception cref="T:System.Exception">Thrown if the version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.Inflate(Nanook.GrindCore.Interop.ZLib.FlushCode)">
            <summary>
            Performs an inflate (decompression) operation.
            </summary>
            <param name="flush">The flush code to use.</param>
            <returns>The error code returned by the native call.</returns>
            <exception cref="T:System.Exception">Thrown if the version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.InflateEnd">
            <summary>
            Ends the inflate (decompression) operation and releases resources.
            </summary>
            <returns>The error code returned by the native call.</returns>
            <exception cref="T:System.Exception">Thrown if the version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle.GetErrorMessage">
            <summary>
            Gets the last error message from the native z_stream, if available.
            </summary>
            <returns>The error message string, or an empty string if none is available.</returns>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.CreateZLibStreamForDeflate(Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle@,Nanook.GrindCore.Interop.ZLib.CompressionLevel,System.Int32,System.Int32,Nanook.GrindCore.Interop.ZLib.CompressionStrategy,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Creates a new ZLib stream for deflate (compression) with the specified parameters.
            </summary>
            <param name="zLibStreamHandle">The resulting ZLib stream handle.</param>
            <param name="level">The compression level.</param>
            <param name="windowBits">The window bits parameter.</param>
            <param name="memLevel">The memory level parameter.</param>
            <param name="strategy">The compression strategy.</param>
            <param name="version">The compression version to use.</param>
            <returns>The error code returned by the native call.</returns>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibNative.CreateZLibStreamForInflate(Nanook.GrindCore.DeflateZLib.ZLibNative.ZLibStreamHandle@,System.Int32,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Creates a new ZLib stream for inflate (decompression) with the specified parameters.
            </summary>
            <param name="zLibStreamHandle">The resulting ZLib stream handle.</param>
            <param name="windowBits">The window bits parameter.</param>
            <param name="version">The compression version to use.</param>
            <returns>The error code returned by the native call.</returns>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.GZipBlock">
            <summary>
            Provides a Deflate block implementation configured for GZip (GZipNg) compression and decompression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.GZipBlock.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.GZipBlock"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="T:Nanook.GrindCore.DeflateZLib.ZLibBlock">
            <summary>
            Provides a block-based implementation of the ZLib compression algorithm using ZLibNg.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.DeflateZLib.ZLibBlock.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.DeflateZLib.ZLibBlock"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.CompressionParameters">
            <summary>
            Represents a set of parameters for configuring Fast-LZMA2 compression.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.CompressionParameters.Values">
            <summary>
            Gets the dictionary of parameter values for Fast-LZMA2 compression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.CompressionParameters.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.CompressionParameters"/> class with the specified thread count and optional dictionary size.
            </summary>
            <param name="threads">The number of threads to use for compression.</param>
            <param name="dictionarySize">The dictionary size in bytes. If zero, the default is used.</param>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.Threads">
            <summary>
            Gets or sets the thread count. Use 0 for auto.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.CompressionLevel">
            <summary>
            Gets or sets the compression level [1..10]. Default is 6.
            Setting <see cref="P:Nanook.GrindCore.FastLzma2.CompressionParameters.HighCompression"/> to 1 switches to an alternate cLevel table.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.HighCompression">
            <summary>
            Gets or sets the high compression mode. Levels 1..10. Typically provides a poor speed/ratio tradeoff.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.DictionaryLog">
            <summary>
            Gets or sets the maximum allowed back-reference distance, as a power of 2. Default is 24.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.DictionarySize">
            <summary>
            Gets or sets the dictionary size in bytes. Default is 64 MiB.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.OverlapFraction">
            <summary>
            Gets or sets the overlap fraction (n/16 of the block size). Default is 2.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.ResetInterval">
            <summary>
            Gets or sets the reset interval for multithreaded decompression. Default is 4.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.BufferResize">
            <summary>
            Gets or sets the buffer resize factor. 0=50%, 1=75%, 2=100%, 3=150%, 4=200%. Default is 2.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.HybridChainLog">
            <summary>
            Gets or sets the hybrid mode HC3 hash chain log2 size. Used only by the hybrid "ultra" strategy. Default is 9.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.HybridCycles">
            <summary>
            Gets or sets the number of search attempts for the HC3 match finder. Used only by the hybrid "ultra" strategy. Default is 1.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.SearchDepth">
            <summary>
            Gets or sets the maximum match finder search depth. Default is 42.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.FastLength">
            <summary>
            Gets or sets the "good enough" match length for search. Default is 48.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.DivideAndConquer">
            <summary>
            Gets or sets whether to split long chains of 2-byte matches. Default is enabled.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.Strategy">
            <summary>
            Gets or sets the compression strategy: 1=fast, 2=optimized, 3=ultra (hybrid mode). Default is ultra.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.LiteralCtxBits">
            <summary>
            Gets or sets the lc value for LZMA2 encoder. Default is 3.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.LiteralPosBits">
            <summary>
            Gets or sets the lp value for LZMA2 encoder. Default is 0.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.PosBits">
            <summary>
            Gets or sets the pb value for LZMA2 encoder. Default is 2.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.Properties">
            <summary>
            Gets or sets whether to omit the property byte at the start of the stream.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.DoXXHash">
            <summary>
            Gets or sets whether to calculate a 32-bit xxhash value from the input data and store it after the stream terminator. Default is 1.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.CompressionParameters.UseReferenceMF">
            <summary>
            Gets or sets whether to use the reference matchfinder for development purposes. SLOW.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.CompressionParameters.ToParams">
            <summary>
            Converts the current <see cref="T:Nanook.GrindCore.FastLzma2.CompressionParameters"/> to a native <see cref="T:Nanook.GrindCore.Interop.FL2CompressionParameters"/> struct.
            </summary>
            <returns>A <see cref="T:Nanook.GrindCore.Interop.FL2CompressionParameters"/> struct with the current settings.</returns>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FL2Strategy">
            <summary>
            Specifies the encoder strategy for Fast-LZMA2.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Strategy.Fast">
            <summary>
            Fast strategy.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Strategy.Opt">
            <summary>
            Optimized strategy.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Strategy.Ultra">
            <summary>
            Ultra (hybrid) strategy.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FastLzma2Block">
            <summary>
            Provides a block-based implementation of the Fast-LZMA2 compression algorithm, supporting multi-threaded compression and decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FastLzma2Block.RequiredCompressOutputSize">
            <summary>
            Gets the required output buffer size for compression, as determined by the Fast-LZMA2 library.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Block.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Block"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> or <c>options.BlockSize</c> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Block.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Compresses the source data block into the destination data block using Fast-LZMA2.
            </summary>
            <param name="srcData">The source data block to compress.</param>
            <param name="dstData">The destination data block to write compressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Block.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Decompresses the source data block into the destination data block using Fast-LZMA2.
            </summary>
            <param name="srcData">The source data block to decompress.</param>
            <param name="dstData">The destination data block to write decompressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if decompression fails or the compressed data is invalid.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Block.OnDispose">
            <summary>
            Releases any resources used by the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Block"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FastLzma2Decoder">
            <summary>
            Provides a decoder for Fast-LZMA2 compressed streams, supporting multi-threaded decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.Properties">
            <summary>
            Gets the properties used for decoding.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.BlockSize">
            <summary>
            Gets the block size used for decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.KeepBlockSize">
            <summary>
            Gets the block size to keep in memory.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.BytesFullSize">
            <summary>
            Gets the total number of decompressed bytes.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.#ctor(System.Func{Nanook.GrindCore.CompressionBuffer,System.Int32,System.Int32},System.Int32,System.Int64,System.Int32,Nanook.GrindCore.FastLzma2.CompressionParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Decoder"/> class for the specified input stream and parameters.
            </summary>
            <param name="read">A delegate to provide input data.</param>
            <param name="bufferSize">The buffer size to use for decompression.</param>
            <param name="size">The expected size of the compressed data.</param>
            <param name="level">The compression level (default is 6).</param>
            <param name="compressParams">Optional compression parameters for multi-threaded decompression.</param>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if the decoder context cannot be initialized.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.setParameter(Nanook.GrindCore.FastLzma2.FL2Parameter,System.UIntPtr)">
            <summary>
            Sets a parameter for the decompression stream.
            </summary>
            <param name="param">The parameter to set.</param>
            <param name="value">The value to set.</param>
            <returns>The result code from the native call.</returns>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if the parameter cannot be set.</exception>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.DecompressProgress">
            <summary>
            Gets the number of bytes decompressed so far.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.DecodeData(Nanook.GrindCore.CompressionBuffer,System.Func{Nanook.GrindCore.CompressionBuffer,System.Int32,System.Int32},Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Decodes data from the input stream into the provided buffer.
            </summary>
            <param name="outData">The buffer to write decompressed data to.</param>
            <param name="read">A delegate to provide input data.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the input stream.</param>
            <returns>The number of bytes written to the buffer.</returns>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if a fatal decompression error occurs.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Decoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Decoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FastLzma2Encoder">
            <summary>
            Provides a Fast-LZMA2 encoder supporting multi-threaded compression and streaming output.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Encoder.#ctor(System.Int32,System.Int32,Nanook.GrindCore.FastLzma2.CompressionParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Encoder"/> class with the specified buffer size, compression level, and parameters.
            </summary>
            <param name="bufferSize">The buffer size to use for output.</param>
            <param name="level">The compression level (default is 6).</param>
            <param name="compressParams">Optional compression parameters for multi-threaded compression.</param>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if the encoder context cannot be initialized or a parameter cannot be set.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Encoder.getParameter(Nanook.GrindCore.FastLzma2.FL2Parameter)">
            <summary>
            Gets the value of a compression parameter from the encoder.
            </summary>
            <param name="param">The parameter to retrieve.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if the parameter cannot be retrieved.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Encoder.setParameter(Nanook.GrindCore.FastLzma2.FL2Parameter,System.UIntPtr)">
            <summary>
            Sets a compression parameter for the encoder.
            </summary>
            <param name="param">The parameter to set.</param>
            <param name="value">The value to set.</param>
            <returns>The result code from the native call.</returns>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if the parameter cannot be set.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Encoder.EncodeData(Nanook.GrindCore.CompressionBuffer,System.Boolean,System.Func{Nanook.GrindCore.CompressionBuffer,System.Int32,System.Int32},Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Encodes data from the provided buffer and writes compressed output to the specified stream.
            </summary>
            <param name="inData">The buffer containing data to compress.</param>
            <param name="appending">Indicates if this is an appending operation (no end-of-stream marker).</param>
            <param name="write">A delegate to output data to.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the output stream.</param>
            <returns>Always returns 0.</returns>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if a fatal compression error occurs.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Encoder.Flush(System.Func{Nanook.GrindCore.CompressionBuffer,System.Int32,System.Int32},Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Flushes any remaining compressed data to the output stream and finalizes the stream.
            </summary>
            <param name="write">A delegate to output data to.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the output stream.</param>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if a fatal compression error occurs.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Encoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Encoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FastLzma2Stream">
            <summary>
            Provides a streaming interface for Fast-LZMA2 compression and decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FastLzma2Stream.BufferSizeInput">
            <summary>
            Gets the input buffer size for Fast-LZMA2 operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FastLzma2Stream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for Fast-LZMA2 operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Stream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Stream"/> class with the specified stream and options.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Stream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions,Nanook.GrindCore.FastLzma2.CompressionParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Stream"/> class with the specified stream, options, and compression parameters.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
            <param name="compressParams">Optional compression parameters for fine-tuning Fast-LZMA2.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Stream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Writes data from the provided buffer to the underlying stream using Fast-LZMA2 compression.
            </summary>
            <param name="data">The buffer containing data to compress and write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Stream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads and decompresses data from the underlying stream into the provided buffer using Fast-LZMA2.
            </summary>
            <param name="data">The buffer to read decompressed data into.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the underlying stream.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the buffer.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Stream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes the compression buffers and finalizes the stream, writing any remaining compressed data.
            </summary>
            <param name="data">The buffer containing data to flush.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
            <exception cref="T:Nanook.GrindCore.FastLzma2.FL2Exception">Thrown if a fatal compression error occurs.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FastLzma2Stream.OnDispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.FastLzma2.FastLzma2Stream"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FL2InBuffer">
            <summary>
            Represents an input buffer for Fast-LZMA2 operations.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2InBuffer.src">
            <summary>
            Pointer to the start of the input buffer.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2InBuffer.size">
            <summary>
            Size of the input buffer in bytes.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2InBuffer.pos">
            <summary>
            Position where reading stopped. Will be updated. Necessarily 0 &lt;= pos &lt;= size.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FL2OutBuffer">
            <summary>
            Represents an output buffer for Fast-LZMA2 operations.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2OutBuffer.dst">
            <summary>
            Pointer to the start of the output buffer.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2OutBuffer.size">
            <summary>
            Size of the output buffer in bytes.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2OutBuffer.pos">
            <summary>
            Position where writing stopped. Will be updated. Necessarily 0 &lt;= pos &lt;= size.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FL2DictBuffer">
            <summary>
            Represents a dictionary buffer for Fast-LZMA2 operations.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2DictBuffer.dst">
            <summary>
            Pointer to the start of the available dictionary buffer.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2DictBuffer.size">
            <summary>
            Size of the remaining dictionary in bytes.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FL2cBuffer">
            <summary>
            Represents a compressed data buffer for Fast-LZMA2 operations.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2cBuffer.src">
            <summary>
            Pointer to the start of the compressed data.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2cBuffer.size">
            <summary>
            Size of the compressed data in bytes.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FL2ErrorCode">
            <summary>
            Represents error codes returned by the Fast-LZMA2 library.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.NoError">
            <summary>No error detected.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.Generic">
            <summary>Generic error.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.InternalError">
            <summary>Internal error (bug).</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.CorruptionDetected">
            <summary>Corrupted block detected.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.ChecksumWrong">
            <summary>Restored data doesn't match checksum.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.ParameterUnsupported">
            <summary>Unsupported parameter.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.ParameterOutOfBound">
            <summary>Parameter is out of bound.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.LclpMaxExceeded">
            <summary>Parameters lc+lp &gt; 4.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.StageWrong">
            <summary>Not possible at this stage of encoding.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.InitMissing">
            <summary>Context should be initialized first.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.MemoryAllocation">
            <summary>Allocation error: not enough memory.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.DstSizeTooSmall">
            <summary>Destination buffer is too small.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.SrcSizeWrong">
            <summary>Source size is incorrect.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.Canceled">
            <summary>Processing was canceled by a call to FL2_cancelCStream() or FL2_cancelDStream().</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.Buffer">
            <summary>Streaming progress halted due to buffer(s) full/empty.</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.TimedOut">
            <summary>Wait timed out. Timeouts should be handled before errors using FL2_isTimedOut().</summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2ErrorCode.MaxCode">
            <summary>
            Maximum error code value. Do not use directly; may change in future versions.
            Use FL2_isError() instead.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FL2Exception">
            <summary>
            Represents errors that occur during Fast-LZMA2 compression or decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.FastLzma2.FL2Exception.ErrorCode">
            <summary>
            Gets the Fast-LZMA2 error code associated with this exception.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FL2Exception.#ctor(System.UIntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.FL2Exception"/> class from a native error code.
            </summary>
            <param name="code">The native error code.</param>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FL2Exception.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.FL2Exception"/> class from an integer error code.
            </summary>
            <param name="code">The error code.</param>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FL2Exception.#ctor(Nanook.GrindCore.FastLzma2.FL2ErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.FastLzma2.FL2Exception"/> class from a <see cref="T:Nanook.GrindCore.FastLzma2.FL2ErrorCode"/>.
            </summary>
            <param name="code">The error code.</param>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FL2Exception.GetErrorCode(System.UIntPtr)">
            <summary>
            Gets the <see cref="T:Nanook.GrindCore.FastLzma2.FL2ErrorCode"/> for a given native code.
            </summary>
            <param name="code">The native error code.</param>
            <returns>The corresponding <see cref="T:Nanook.GrindCore.FastLzma2.FL2ErrorCode"/>.</returns>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FL2Exception.GetErrorCode(System.Int32)">
            <summary>
            Gets the <see cref="T:Nanook.GrindCore.FastLzma2.FL2ErrorCode"/> for a given integer code.
            </summary>
            <param name="code">The error code.</param>
            <returns>The corresponding <see cref="T:Nanook.GrindCore.FastLzma2.FL2ErrorCode"/>.</returns>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FL2Exception.IsError(System.UIntPtr)">
            <summary>
            Determines whether the specified native code represents an error.
            </summary>
            <param name="code">The native error code.</param>
            <returns><c>true</c> if the code represents an error; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FL2Exception.IsError(System.Int32)">
            <summary>
            Determines whether the specified integer code represents an error.
            </summary>
            <param name="code">The error code.</param>
            <returns><c>true</c> if the code represents an error; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nanook.GrindCore.FastLzma2.FL2Exception.GetErrorString(Nanook.GrindCore.FastLzma2.FL2ErrorCode)">
            <summary>
            Gets a human-readable error string for the specified <see cref="T:Nanook.GrindCore.FastLzma2.FL2ErrorCode"/>.
            </summary>
            <param name="code">The error code.</param>
            <returns>A string describing the error.</returns>
        </member>
        <member name="T:Nanook.GrindCore.FastLzma2.FL2Parameter">
            <summary>
            Specifies configurable parameters for Fast-LZMA2 compression and decompression.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.CompressionLevel">
            <summary>
            Update all compression parameters according to pre-defined cLevel table.
            Process Level [1..10]. Default level is FL2_CLEVEL_DEFAULT==6.
            Setting FL2_p_highCompression to 1 switches to an alternate cLevel table.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.HighCompression">
            <summary>
            Maximize compression ratio for a given dictionary size. Levels 1..10 = dictionaryLog 20..29 (1 Mb..512 Mb).
            Typically provides a poor speed/ratio tradeoff.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.DictionaryLog">
            <summary>
            Maximum allowed back-reference distance, expressed as power of 2.
            Must be clamped between FL2_DICTLOG_MIN and FL2_DICTLOG_MAX. Default = 24.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.DictionarySize">
            <summary>
            Same as above but expressed as an absolute value.
            Must be clamped between FL2_DICTSIZE_MIN and FL2_DICTSIZE_MAX. Default = 16 Mb.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.OverlapFraction">
            <summary>
            The radix match finder is block-based, so some overlap is retained from each block to improve compression of the next.
            This value is expressed as n / 16 of the block size (dictionary size). Larger values are slower.
            Values above 2 mostly yield only a small improvement in compression.
            A large value for a small dictionary may worsen multithreaded compression. Default = 2.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.ResetInterval">
            <summary>
            For multithreaded decompression. A dictionary reset will occur after each dictionarySize * resetInterval bytes of input.
            Default = 4.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.BufferResize">
            <summary>
            Buffering speeds up the matchfinder. Buffer resize determines the percentage of the normal output buffer size used, which depends on dictionary size.
            0=50, 1=75, 2=100, 3=150, 4=200. Higher number = slower, better compression, higher memory usage.
            A CPU with a large memory cache may make effective use of a larger output buffer. Default = 2.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.HybridChainLog">
            <summary>
            Size of the hybrid mode HC3 hash chain, as a power of 2.
            Resulting table size is (1 &lt;&lt; (chainLog+2)) bytes.
            Larger tables result in better and slower compression.
            This parameter is only used by the hybrid "ultra" strategy. Default = 9.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.HybridCycles">
            <summary>
            Number of search attempts made by the HC3 match finder.
            Used only by the hybrid "ultra" strategy.
            More attempts result in slightly better and slower compression. Default = 1.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.SearchDepth">
            <summary>
            Match finder will resolve string matches up to this length.
            If a longer match exists further back in the input, it will not be found. Default = 42.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.FastLength">
            <summary>
            Only useful for strategies &gt;= opt.
            Length of match considered "good enough" to stop search.
            Larger values make compression stronger and slower. Default = 48.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.DivideAndConquer">
            <summary>
            Split long chains of 2-byte matches into shorter chains with a small overlap for further processing.
            Allows buffering of all chains at length 2.
            Faster, less compression. Generally a good tradeoff. Default = enabled.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.Strategy">
            <summary>
            1 = fast; 2 = optimized, 3 = ultra (hybrid mode).
            The higher the value of the selected strategy, the more complex it is, resulting in stronger and slower compression.
            Default = ultra.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.LiteralCtxBits">
            <summary>
            lc value for LZMA2 encoder. Default = 3.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.LiteralPosBits">
            <summary>
            lp value for LZMA2 encoder. Default = 0.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.posBits">
            <summary>
            pb value for LZMA2 encoder. Default = 2.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.Properties">
            <summary>
            Omit the property byte at the start of the stream. For use within 7-zip or other containers which store the property byte elsewhere.
            A stream compressed under this setting cannot be decoded by this library.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.DoXXHash">
            <summary>
            Calculate a 32-bit xxhash value from the input data and store it after the stream terminator.
            The value will be checked on decompression. 0 = do not calculate; 1 = calculate (default).
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.FastLzma2.FL2Parameter.UseReferenceMF">
            <summary>
            Use the reference matchfinder for development purposes. SLOW.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.GZip.GZipStream">
            <summary>
            Provides a stream for GZip (GZipNg) compression and decompression, using DeflateStream with GZip-specific window bits.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.GZip.GZipStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.GZip.GZipStream"/> class with the specified stream and compression options.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="T:Nanook.GrindCore.HashFactory">
            <summary>
            Provides factory methods for creating and computing hash values using various supported hash algorithms.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.HashFactory.Create(Nanook.GrindCore.HashType)">
            <summary>
            Creates a new <see cref="T:System.Security.Cryptography.HashAlgorithm"/> instance for the specified <see cref="T:Nanook.GrindCore.HashType"/>.
            </summary>
            <param name="type">The hash algorithm type to create.</param>
            <returns>A new <see cref="T:System.Security.Cryptography.HashAlgorithm"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified hash type is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.HashFactory.Compute(Nanook.GrindCore.HashType,System.Byte[])">
            <summary>
            Computes the hash value for the entire input data using the specified hash algorithm type.
            </summary>
            <param name="type">The hash algorithm type to use.</param>
            <param name="data">The input data to hash.</param>
            <returns>The computed hash value as a byte array.</returns>
        </member>
        <member name="M:Nanook.GrindCore.HashFactory.Compute(Nanook.GrindCore.HashType,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for a segment of the input data using the specified hash algorithm type.
            </summary>
            <param name="type">The hash algorithm type to use.</param>
            <param name="data">The input data to hash.</param>
            <param name="offset">The offset in the input data at which to begin hashing.</param>
            <param name="length">The number of bytes to hash.</param>
            <returns>The computed hash value as a byte array.</returns>
        </member>
        <member name="T:Nanook.GrindCore.HashType">
            <summary>
            Specifies supported hash algorithms for integrity or fingerprinting.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.FL2CompressionParameters.DictionarySize">
            <summary>
            largest match distance : larger == more compression, more memory needed during decompression;> 64Mb == more memory per byte, slower
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.FL2CompressionParameters.OverlapFraction">
            <summary>
            overlap between consecutive blocks in 1/16 units: larger == more compression, slower
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.FL2CompressionParameters.ChainLog">
            <summary>
            HC3 sliding window : larger == more compression, slower; hybrid mode only (ultra)
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.FL2CompressionParameters.CyclesLog">
            <summary>
            nb of searches : larger == more compression, slower; hybrid mode only (ultra)
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.FL2CompressionParameters.SearchDepth">
            <summary>
            maximum depth for resolving string matches : larger == more compression, slower
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.FL2CompressionParameters.FastLength">
            <summary>
            acceptable match size for parser : larger == more compression, slower; fast bytes parameter from 7-Zip
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.FL2CompressionParameters.DivideAndConquer">
            <summary>
            split long chains of 2-byte matches into shorter chains with a small overlap : faster, somewhat less compression; enabled by default
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.FL2CompressionParameters.Strategy">
            <summary>
            encoder strategy : fast, optimized or ultra (hybrid)
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_compress(System.Byte[],System.UIntPtr,System.Byte[],System.UIntPtr,System.Int32)">
            <summary>
            Compresses `src` content as a single LZMA2 compressed stream into already allocated `dst`.
            Call FL2_compressMt() to use > 1 thread.Specify nbThreads = 0 to use all cores.
            </summary>
            <param name="dst"></param>
            <param name="dstCapacity"></param>
            <param name="src"></param>
            <param name="srcSize"></param>
            <param name="compressionLevel"></param>
            <returns> compressed size written into `dst` ,or an error code if it fails. </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_compressMt(System.Byte[],System.UIntPtr,System.Byte[],System.UIntPtr,System.Int32,System.UInt32)">
            <summary>
            Compresses `src` content as a single LZMA2 compressed stream into already allocated `dst`.
            Call FL2_compressMt() to use > 1 thread.Specify nbThreads = 0 to use all cores.
            </summary>
            <param name="dst"></param>
            <param name="dstCapacity"></param>
            <param name="src"></param>
            <param name="srcSize"></param>
            <param name="compressionLevel"></param>
            <param name="nbThreads"></param>
            <returns> compressed size written into `dst` ,or an error code if it fails. </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_decompress(System.Byte[],System.UIntPtr,System.Byte[],System.UIntPtr)">
            <summary>
            Decompresses a single LZMA2 compressed stream from `src` into already allocated `dst`.
            `compressedSize` : must be at least the size of the LZMA2 stream.
            `dstCapacity` is the original, uncompressed size to regenerate, returned by calling FL2_findDecompressedSize().
            Call FL2_decompressMt() to use > 1 thread. Specify nbThreads = 0 to use all cores.
            The stream must contain dictionary resets to use multiple threads.
            These are inserted during compression by default.
            The frequency can be changed/disabled with the FL2_p_resetInterval parameter setting.
            </summary>
            <param name="dst"></param>
            <param name="dstCapacity"></param>
            <param name="src"></param>
            <param name="compressedSize"></param>
            <returns>the number of bytes decompressed into `dst`,or an errorCode if it fails.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_decompressMt(System.Byte*,System.UIntPtr,System.Byte*,System.UIntPtr,System.UInt32)">
            <summary>
            Decompresses a single LZMA2 compressed stream from `src` into already allocated `dst`.
            `compressedSize` : must be at least the size of the LZMA2 stream.
            `dstCapacity` is the original, uncompressed size to regenerate, returned by calling FL2_findDecompressedSize().
            Call FL2_decompressMt() to use > 1 thread. Specify nbThreads = 0 to use all cores.
            The stream must contain dictionary resets to use multiple threads.These are inserted during compression by  default.
            The frequency can be changed/disabled with the FL2_p_resetInterval parameter setting.
            </summary>
            <param name="dst"></param>
            <param name="dstCapacity"></param>
            <param name="src"></param>
            <param name="compressedSize"></param>
            <param name="nbThreads"></param>
            <returns>
            the number of bytes decompressed into `dst`, or an errorCode if it fails.
            </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_findDecompressedSize(System.Byte[],System.UIntPtr)">
            <summary>
            A property byte is assumed to exist at position 0 in `src`. If the stream was created without one,  subtract 1 byte from `src` when passing it to the function.
            </summary>
            <param name="src">should point to the start of a LZMA2 encoded stream</param>
            <param name="srcSize">must be at least as large as the LZMA2 stream including end marker.</param>
            <returns>
            decompressed size of the stream in `src`, if known.
            FL2_CONTENTSIZE_ERROR (nuint.max) if an error occurred (e.g. corruption, srcSize too small)
            </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_findDecompressedSize(System.Byte*,System.UIntPtr)">
            <summary>
            A property byte is assumed to exist at position 0 in `src`. If the stream was created without one,  subtract 1 byte from `src` when passing it to the function.
            </summary>
            <param name="src">should point to the start of a LZMA2 encoded stream</param>
            <param name="srcSize">must be at least as large as the LZMA2 stream including end marker.</param>
            <returns>
            decompressed size of the stream in `src`, if known.
            FL2_CONTENTSIZE_ERROR (nuint.max) if an error occurred (e.g. corruption, srcSize too small)
            </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_getDictSizeFromProp(System.Byte)">
            <summary>
            Get the dictionary size property.
            Intended for use with the FL2_p_omitProperties parameter for creating a 7-zip or XZ compatible LZMA2 stream.
            </summary>
            <param name="prop"></param>
            <returns>Error code</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_compressBound(System.UIntPtr)">
            <summary>
            maximum compressed size in worst case scenario
            </summary>
            <param name="srcSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_maxCLevel">
            <summary>
            maximum compression level available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_maxHighCLevel">
            <summary>
            maximum compression level available in high mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_getLevelParameters(System.Int32,System.Int32,Nanook.GrindCore.Interop.FL2CompressionParameters@)">
            <summary>
            Get all compression parameter values defined by the preset compressionLevel.
            </summary>
            <param name="compressionLevel"></param>
            <param name="high"></param>
            <param name="parameters"></param>
            <returns>
            the values in a FL2_compressionParameters struct, or the parameter_outOfBound error code
            (which can be tested with FL2_isError()) if compressionLevel is invalid.
            </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_estimateCCtxSize(System.Int32,System.UInt32)">
            <summary>
            memory usage determined by level
            </summary>
            <param name="compressionLevel"></param>
            <param name="nbThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_estimateCCtxSize_byParams(Nanook.GrindCore.Interop.FL2CompressionParameters@,System.UInt32)">
            <summary>
            memory usage determined by params
            </summary>
            <param name="parameters"></param>
            <param name="nbThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_estimateCCtxSize_usingCCtx(System.IntPtr)">
            <summary>
            memory usage determined by settings
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_estimateDCtxSize(System.UInt32)">
            <summary>
            The size of a DCtx does not include a dictionary _outBuffer because the caller must supply one.
            </summary>
            <param name="nbThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_compressCCtx(System.IntPtr,System.Byte[],System.UIntPtr,System.Byte[],System.UIntPtr,System.Int32)">
            <summary>
            Same as FL2_compress(), but requires an allocated FL2_CCtx (see FL2_createCCtx()).
            </summary>
            <param name="context"></param>
            <param name="dst"></param>
            <param name="dstCapacity"></param>
            <param name="src"></param>
            <param name="srcSize"></param>
            <param name="compressionLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_compressCCtx(System.IntPtr,System.Byte*,System.UIntPtr,System.Byte*,System.UIntPtr,System.Int32)">
            <summary>
            Same as FL2_compress(), but requires an allocated FL2_CCtx (see FL2_createCCtx()).
            </summary>
            <param name="context"></param>
            <param name="dst"></param>
            <param name="dstCapacity"></param>
            <param name="src"></param>
            <param name="srcSize"></param>
            <param name="compressionLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_getCCtxDictProp(System.IntPtr)">
            <summary>
            Get the dictionary size property. Intended for use with the FL2_p_omitProperties parameter for creating a 7-zip or XZ compatible LZMA2 stream.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_CCtx_setParameter(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2Parameter,System.UIntPtr)">
            <summary>
            Set one compression parameter, selected by enum FL2_cParameter.
            </summary>
            <param name="context"></param>
            <param name="param"></param>
            <param name="value"></param>
            <returns>
            informational value (typically, the one being set, possibly corrected), or an error code (which can be tested with FL2_isError()).
            </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_CCtx_getParameter(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2Parameter)">
            <summary>
            Get one compression parameter, selected by enum FL2_cParameter.
            </summary>
            <param name="context"></param>
            <param name="param"></param>
            <returns>
            the parameter value, or the parameter_unsupported error code (which can be tested with FL2_isError()).
            </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_initDCtx(System.IntPtr,System.Byte)">
            <summary>
            Use only when a property byte is not present at input byte 0. No init is necessary otherwise. The caller must store the result from FL2_getCCtxDictProp() and pass it to this function.
            </summary>
            <param name="context"></param>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_decompressDCtx(System.IntPtr,System.Byte[],System.UIntPtr,System.Byte[],System.UIntPtr)">
            <summary>
            Same as FL2_decompress(), requires an allocated FL2_DCtx (see FL2_createDCtx())
            </summary>
            <param name="context"></param>
            <param name="dst"></param>
            <param name="dstCapacity"></param>
            <param name="src"></param>
            <param name="srcSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_decompressDCtx(System.IntPtr,System.Byte*,System.UIntPtr,System.Byte*,System.UIntPtr)">
            <summary>
            Same as FL2_decompress(), requires an allocated FL2_DCtx (see FL2_createDCtx())
            </summary>
            <param name="context"></param>
            <param name="dst"></param>
            <param name="dstCapacity"></param>
            <param name="src"></param>
            <param name="srcSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_initCStream(System.IntPtr,System.Int32)">
            <summary>
            Call this function before beginning a new compressed data stream.
            To keep the stream object's  current parameters, specify zero for the compression level.
            The object is set to the default level upon creation.
            </summary>
            <param name="fcs"></param>
            <param name="compressionLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_setCStreamTimeout(System.IntPtr,System.UInt32)">
            <summary>
            Sets a timeout in milliseconds. Zero disables the timeout (default).
            If a nonzero timeout is set, functions FL2_compressStream(), FL2_getDictionaryBuffer(), FL2_updateDictionary(), FL2_getNextCompressedBuffer(),
            FL2_flushStream(), and FL2_endStream() may return a timeout code before compression of the current dictionary of data completes.
            FL2_isError() returns true for the timeout code, so check the code with FL2_isTimedOut() before testing for errors.
            With the exception of FL2_updateDictionary(), the above functions may be called again to wait for completion.
            A typical application for timeouts is to update the user on compression progress.
            </summary>
            <param name="fcs"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_compressStream(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2OutBuffer@,Nanook.GrindCore.FastLzma2.FL2InBuffer@)">
            <summary>
            Reads data from input into the dictionary _outBuffer. Compression will begin if the _outBuffer fills up.
            A dual buffering stream will fill the second _outBuffer while compression proceeds on the first.
            A call to FL2_compressStream() will wait for ongoing compression to complete if all dictionary space is filled.
             FL2_compressStream() must not be called with output == NULL unless the caller has read all compressed data from the CStream object.
            </summary>
            <param name="fcs"></param>
            <param name="output"></param>
            <param name="input"></param>
            <returns>1 to indicate compressed data must be read (or output is full), or 0 otherwise.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_copyCStreamOutput(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2OutBuffer@)">
            <summary>
            Copies compressed data to the output _outBuffer until the _outBuffer is full or all available data is copied.
            If asynchronous compression is in progress, the function returns 0 without waiting.
            </summary>
            <param name="fcs"></param>
            <param name="output"></param>
            <returns>1 to indicate some compressed data remains, or 0 otherwise.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_getDictionaryBuffer(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2DictBuffer@)">
            <summary>
            Returns a _outBuffer in the FL2_outBuffer object, which the caller can directly read data into.
            Applications will normally pass this _outBuffer to an I/O read function or upstream filter.
            </summary>
            <param name="fcs"></param>
            <param name="dict"></param>
            <returns>0, or an error or timeout code.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_updateDictionary(System.IntPtr,System.UIntPtr)">
            <summary>
            Informs the CStream how much data was added to the _outBuffer. Compression begins if the dictionary was filled.
            </summary>
            <param name="fcs"></param>
            <param name="addedSize"></param>
            <returns>1 to indicate compressed data must be read, 0 if not, or an error code.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_getNextCompressedBuffer(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2cBuffer@)">
            <summary>
            Returns a _outBuffer containing a slice of the compressed data. Call this function and process the data until the function returns zero.
             In most cases it will return a _outBuffer for each compression thread used.
            It is sometimes less but never more than nbThreads.If asynchronous compression is in progress,
             this function will wait for completion before returning, or it will return the timeout code.
            </summary>
            <param name="fcs"></param>
            <param name="cbuf"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_getCStreamProgress(System.IntPtr,System.UInt64)">
            <summary>
            Returns the number of bytes processed since the stream was initialized.
            This is a synthetic estimate because the match finder does not proceed sequentially through the data.
            If outputSize is not NULL, returns the number of bytes of compressed data generated.
            </summary>
            <param name="fcs"></param>
            <param name="outputSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_waitCStream(System.IntPtr)">
            <summary>
            Waits for compression to end.
            This function returns after the timeout set using FL2_setCStreamTimeout has elapsed.
            Unnecessary when no timeout is set.
            </summary>
            <param name="fcs"></param>
            <returns>1 if compressed output is available, 0 if not, or the timeout code.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_cancelCStream(System.IntPtr)">
            <summary>
            Cancels any compression operation underway.
            Useful only when dual buffering and/or timeouts  are enabled.
            The stream will be returned to an uninitialized state.
            </summary>
            <param name="fcs"></param>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_remainingOutputSize(System.IntPtr)">
            <summary>
            The amount of compressed data remaining to be read from the CStream object.
            </summary>
            <param name="fcs"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_flushStream(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2OutBuffer@)">
            <summary>
            Process all data remaining in the dictionary _outBuffer(s). It may be necessary to call FL2_flushStream() more than once.
            If output == NULL the compressed data must be read from the CStream object after each call.
            Flushing is not normally useful and produces larger output.
            </summary>
            <param name="fcs"></param>
            <param name="output"></param>
            <returns>1 if input or output still exists in the CStream object, 0 if complete, or an error code.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_endStream(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2OutBuffer@)">
            <summary>
            Process all data remaining in the dictionary _outBuffer(s) and write the stream end marker.
            It may be necessary to call FL2_endStream() more than once.
            If output == NULL the compressed data must be read from the CStream object after each call.
            </summary>
            <param name="fcs"></param>
            <param name="output"></param>
            <returns>0 when compression is complete and all output has been flushed, 1 if not complete, or an error code.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_CStream_setParameter(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2Parameter,System.UIntPtr)">
            <summary>
            Set one compression parameter, selected by enum FL2_cParameter.
            </summary>
            <param name="fcs"></param>
            <param name="param"></param>
            <param name="value"></param>
            <returns>
            informational value (typically, the one being set, possibly corrected),or an error code (which can be tested with FL2_isError()).
            </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_CStream_getParameter(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2Parameter)">
            <summary>
            Get one compression parameter, selected by enum FL2_cParameter.
            </summary>
            <param name="fcs"></param>
            <param name="param"></param>
            <returns>
            the parameter value, or the parameter_unsupported error code (which can be tested with FL2_isError()).
            </returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_estimateCStreamSize(System.Int32,System.UInt32,System.Int32)">
            <summary>
            memory usage determined by level
            </summary>
            <param name="compressionLevel"></param>
            <param name="nbThreads"></param>
            <param name="dualBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_estimateCStreamSize_byParams(Nanook.GrindCore.Interop.FL2CompressionParameters@,System.UInt32,System.Int32)">
            <summary>
            memory usage determined by params
            </summary>
            <param name="parameters"></param>
            <param name="nbThreads"></param>
            <param name="dualBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_estimateCStreamSize_usingCStream(System.IntPtr)">
            <summary>
            memory usage determined by settings
            </summary>
            <param name="fcs"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_setDStreamMemoryLimitMt(System.IntPtr,System.UIntPtr)">
            <summary>
            Set a total size limit for multithreaded decoder input and output buffers. MT decoder memory
            usage is unknown until the input is parsed.If the limit is exceeded, the decoder switches to using a single thread.
            MT decoding memory usage is typically dictionary_size * 4 * nbThreads for the output
            buffers plus the size of the compressed input for that amount of output.
            </summary>
            <param name="fds"></param>
            <param name="limit"></param>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_setDStreamTimeout(System.IntPtr,System.UInt32)">
            <summary>
            Sets a timeout in milliseconds. Zero disables the timeout.
            If a nonzero timeout is set,FL2_decompressStream() may return a timeout code before decompression of the available data completes.
            FL2_isError() returns true for the timeout code, so check the code with FL2_isTimedOut() before testing for errors.
            After a timeout occurs, do not call FL2_decompressStream() again unless a call to FL2_waitDStream() returns 1.
            A typical application for timeouts is to update the user on decompression progress.
            </summary>
            <param name="fds"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_waitDStream(System.IntPtr)">
            <summary>
            Waits for decompression to end after a timeout has occurred.
            This function returns after the timeout set using FL2_setDStreamTimeout() has elapsed,
            or when decompression of available input is complete.Unnecessary when no timeout is set.
            </summary>
            <param name="fds"></param>
            <returns>0 if the stream is complete, 1 if not complete, or an error code.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_cancelDStream(System.IntPtr)">
            <summary>
            Frees memory allocated for MT decoding.
            If a timeout is set and the caller is waiting for completion of MT decoding,
            decompression in progress will be canceled.
            </summary>
            <param name="fds"></param>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_getDStreamProgress(System.IntPtr)">
            <summary>
            Returns the number of bytes decoded since the stream was initialized.
            </summary>
            <param name="fds"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_initDStream(System.IntPtr)">
            <summary>
            Call this function before decompressing a stream.
            FL2_initDStream_withProp() must be used for streams which do not include a property byte at position zero.
            The caller is responsible for storing and passing the property byte.
            </summary>
            <param name="fds"></param>
            <returns>0 if okay, or an error if the stream object is still in use from a previous call to FL2_decompressStream() (see timeout info above).</returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_decompressStream(System.IntPtr,Nanook.GrindCore.FastLzma2.FL2OutBuffer@,Nanook.GrindCore.FastLzma2.FL2InBuffer@)">
            <summary>
            Reads data from input and decompresses to output.
            Returns 1 if the stream is unfinished, 0 if the terminator was encountered(he'll be back)
            and all data was written to output, or an error code.
            Call this function repeatedly if necessary, removing data from output and/or loading data into input before each call.
            </summary>
            <param name="fds"></param>
            <param name="output"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Nanook.GrindCore.Interop.FastLzma2.FL2_estimateDStreamSize(System.UIntPtr,System.UInt32)">
            <summary>
            Estimate decompression memory use from the dictionary size and number of threads.
            For nbThreads == 0 the number of available cores will be used.
            Obtain dictSize by passing the property byte to FL2_getDictSizeFromProp.
            </summary>
            <param name="dictSize"></param>
            <param name="nbThreads"></param>
            <returns></returns>
        </member>
        <member name="T:Nanook.GrindCore.Interop.ZStream">
            <summary>
            ZLib stream descriptor data structure
            Do not construct instances of <code>ZStream</code> explicitly.
            Always use <code>ZLibNative.DN8_ZLib_v1_3_1_DeflateInit2_</code> or <code>ZLibNative.InflateInit2_</code> instead.
            Those methods will wrap this structure into a <code>SafeHandle</code> and thus make sure that it is always _disposed correctly.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Interop.ZLib.CompressionLevel">
             <summary>
             <p>ZLib can accept any integer value between 0 and 9 (inclusive) as a valid compression level parameter:
             1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time).
             <code>CompressionLevel.DefaultCompression</code> = -1 requests a default compromise between speed and compression
             (currently equivalent to level 6).</p>
            
             <p><strong>How to choose a compression level:</strong></p>
            
             <p>The names <code>NoCompression</code>, <code>BestSpeed</code>, <code>DefaultCompression</code>, <code>BestCompression</code> are taken over from
             the corresponding ZLib definitions, which map to our public NoCompression, Fastest, Optimal, and SmallestSize respectively.</p>
             <p><em>Optimal Compression:</em></p>
             <p><code>ZLibNative.CompressionLevel compressionLevel = ZLibNative.CompressionLevel.DefaultCompression;</code> <br />
                <code>int windowBits = 15;  // or -15 if no headers required</code> <br />
                <code>int memLevel = 8;</code> <br />
                <code>ZLibNative.CompressionStrategy strategy = ZLibNative.CompressionStrategy.DefaultStrategy;</code> </p>
            
            <p><em>Fastest compression:</em></p>
            <p><code>ZLibNative.CompressionLevel compressionLevel = ZLibNative.CompressionLevel.BestSpeed;</code> <br />
               <code>int windowBits = 15;  // or -15 if no headers required</code> <br />
               <code>int memLevel = 8; </code> <br />
               <code>ZLibNative.CompressionStrategy strategy = ZLibNative.CompressionStrategy.DefaultStrategy;</code> </p>
            
             <p><em>No compression (even faster, useful for data that cannot be compressed such some image formats):</em></p>
             <p><code>ZLibNative.CompressionLevel compressionLevel = ZLibNative.CompressionLevel.NoCompression;</code> <br />
                <code>int windowBits = 15;  // or -15 if no headers required</code> <br />
                <code>int memLevel = 7;</code> <br />
                <code>ZLibNative.CompressionStrategy strategy = ZLibNative.CompressionStrategy.DefaultStrategy;</code> </p>
            
             <p><em>Smallest Size Compression:</em></p>
             <p><code>ZLibNative.CompressionLevel compressionLevel = ZLibNative.CompressionLevel.BestCompression;</code> <br />
                <code>int windowBits = 15;  // or -15 if no headers required</code> <br />
                <code>int memLevel = 8;</code> <br />
                <code>ZLibNative.CompressionStrategy strategy = ZLibNative.CompressionStrategy.DefaultStrategy;</code> </p>
             </summary>
        </member>
        <member name="T:Nanook.GrindCore.Interop.ZLib.CompressionStrategy">
             <summary>
             <p><strong>From the ZLib manual:</strong></p>
             <p><code>CompressionStrategy</code> is used to tune the compression algorithm.<br />
             Use the value <code>DefaultStrategy</code> for normal data, <code>Filtered</code> for data produced by a filter (or predictor),
             <code>HuffmanOnly</code> to force Huffman encoding only (no string match), or <code>Rle</code> to limit match distances to one
             (run-length encoding). Filtered data consists mostly of small values with a somewhat random distribution. In this case, the
             compression algorithm is tuned to compress them better. The effect of <code>Filtered</code> is to force more Huffman coding and]
             less string matching; it is somewhat intermediate between <code>DefaultStrategy</code> and <code>HuffmanOnly</code>.
             <code>Rle</code> is designed to be almost as fast as <code>HuffmanOnly</code>, but give better compression for PNG image data.
             The strategy parameter only affects the compression ratio but not the correctness of the compressed output even if it is not set
             appropriately. <code>Fixed</code> prevents the use of dynamic Huffman codes, allowing for a simpler decoder for special applications.</p>
            
             <p><strong>For .NET Framework use:</strong></p>
             <p>We have investigated compression scenarios for a bunch of different frequently occurring compression data and found that in all
             cases we investigated so far, <code>DefaultStrategy</code> provided best results</p>
             <p>See also: How to choose a compression level (in comments to <code>CompressionLevel</code>.</p>
             </summary>
        </member>
        <member name="T:Nanook.GrindCore.Interop.ZLib.CompressionMethod">
            <summary>
            In version 1.2.3, ZLib provides on the <code>Deflated</code>-<code>CompressionMethod</code>.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.ZLib.Deflate_DefaultWindowBits">
            <summary>
            <p><strong>From the ZLib manual:</strong></p>
            <p>ZLib's <code>windowBits</code> parameter is the base two logarithm of the window size (the size of the history _outBuffer).
            It should be in the range 8..15 for this version of the library. Larger values of this parameter result in better compression
            at the expense of memory usage. The default value is 15 if deflateInit is used instead.<br /></p>
            <strong>Note</strong>:
            <code>windowBits</code> can also be -8..-15 for raw deflate. In this case, -windowBits determines the window size.
            <code>Deflate</code> will then generate raw deflate data with no ZLib header or trailer, and will not compute an adler32 check value.<br />
            <p>See also: How to choose a compression level (in comments to <code>CompressionLevel</code>.</p>
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.ZLib.ZLib_DefaultWindowBits">
            <summary>
            <p><strong>From the ZLib manual:</strong></p>
            <p>ZLib's <code>windowBits</code> parameter is the base two logarithm of the window size (the size of the history _outBuffer).
            It should be in the range 8..15 for this version of the library. Larger values of this parameter result in better compression
            at the expense of memory usage. The default value is 15 if deflateInit is used instead.<br /></p>
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.ZLib.GZip_DefaultWindowBits">
            <summary>
            <p>Zlib's <code>windowBits</code> parameter is the base two logarithm of the window size (the size of the history _outBuffer).
            For GZip header encoding, <code>windowBits</code> should be equal to a value between 8..15 (to specify Window Size) added to
            16. The range of values for GZip encoding is therefore 24..31.
            <strong>Note</strong>:
            The GZip header will have no file name, no extra data, no comment, no modification time (set to zero), no header crc, and
            the operating system will be set based on the OS that the ZLib library was compiled to. <code>ZStream.adler</code>
            is a crc32 instead of an adler32.</p>
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Interop.ZLib.Deflate_DefaultMemLevel">
            <summary>
            <p><strong>From the ZLib manual:</strong></p>
            <p>The <code>memLevel</code> parameter specifies how much memory should be allocated for the internal compression state.
            <code>memLevel</code> = 1 uses minimum memory but is slow and reduces compression ratio; <code>memLevel</code> = 9 uses maximum
            memory for optimal speed. The default value is 8.</p>
            <p>See also: How to choose a compression level (in comments to <code>CompressionLevel</code>.</p>
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Interop.ZLib.DN8_ZLib_v1_3_1_DeflateInit2_(Nanook.GrindCore.Interop.ZStream*,Nanook.GrindCore.Interop.ZLib.CompressionLevel,Nanook.GrindCore.Interop.ZLib.CompressionMethod,System.Int32,System.Int32,Nanook.GrindCore.Interop.ZLib.CompressionStrategy)">
             Do not remove the nested typing of types inside of <code>Nanook.GrindCore.ZLibNative</code>.
             This was done on purpose to:
            
             - Achieve the right encapsulation in a situation where <code>ZLibNative</code> may be compiled division-wide
               into different assemblies that wish to consume <code>Nanook.GrindCore.Native</code>. Since <code>internal</code>
               scope is effectively like <code>public</code> scope when compiling <code>ZLibNative</code> into a higher
               level assembly, we need a combination of inner types and <code>private</code>-scope members to achieve
               the right encapsulation.
            
             - Achieve late dynamic loading of <code>Nanook.GrindCore.Native.dll</code> at the right time.
               The native assembly will not be loaded unless it is actually used since the loading is performed by a static
               constructor of an inner type that is not directly referenced by user code.
            
               In Dev12 we would like to create a proper feature for loading native assemblies from user-specified
               directories in order to PInvoke into them. This would preferably happen in the native interop/PInvoke
               layer; if not we can add a Framework level feature.
        </member>
        <member name="T:Nanook.GrindCore.XXHash.XXHash32">
            <summary>
            Represents the XXHash32 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.XXHash.XXHash32"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash32.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash32.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash32.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.XXHash.XXH32_CTX*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash32.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.XXHash.XXHash32"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.XXHash.XXHash32"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash32.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash32.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.XXHash.XXHash64">
            <summary>
            Represents the XXHash64 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.XXHash.XXHash64"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash64.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash64.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash64.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.XXHash.XXH64_CTX*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash64.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.XXHash.XXHash64"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.XXHash.XXHash64"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash64.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.XXHash.XXHash64.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.Lz4.Lz4Block">
            <summary>
            Provides a block-based implementation of the LZ4 compression algorithm.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lz4.Lz4Block.RequiredCompressOutputSize">
            <summary>
            Gets the required output buffer size for compression, as determined by the LZ4 algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Block.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lz4.Lz4Block"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Block.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Compresses the source data block into the destination data block using LZ4.
            </summary>
            <param name="srcData">The source data block to compress.</param>
            <param name="dstData">The destination data block to write compressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Block.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Decompresses the source data block into the destination data block using LZ4.
            </summary>
            <param name="srcData">The source data block to decompress.</param>
            <param name="dstData">The destination data block to write decompressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if decompression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Block.OnDispose">
            <summary>
            Releases any resources used by the <see cref="T:Nanook.GrindCore.Lz4.Lz4Block"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lz4.Lz4Decoder">
            <summary>
            Provides a decoder for LZ4 frame-compressed data, supporting block-based decompression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Decoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lz4.Lz4Decoder"/> class with the specified block size.
            </summary>
            <param name="blockSize">The size of the buffer to allocate for decompression.</param>
            <exception cref="T:System.Exception">Thrown if the decompression context or buffer cannot be allocated.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Decoder.DecodeData(Nanook.GrindCore.CompressionBuffer,System.Int32@,Nanook.GrindCore.CompressionBuffer)">
            <summary>
            Decodes LZ4 frame-compressed data from the input buffer into the output buffer.
            </summary>
            <param name="inData">The input buffer containing compressed data.</param>
            <param name="readSz">Outputs the number of bytes read from the input buffer.</param>
            <param name="outData">The output buffer to write decompressed data to.</param>
            <returns>The number of bytes written to the output buffer.</returns>
            <exception cref="T:System.Exception">Thrown if frame info or decompression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Decoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.Lz4.Lz4Decoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lz4.Lz4Encoder">
            <summary>
            Provides an encoder for LZ4 frame-compressed data, supporting block-based compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lz4.Lz4Encoder.BlockSize">
            <summary>
            Gets the block size used for compression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Encoder.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lz4.Lz4Encoder"/> class with the specified block size and compression level.
            </summary>
            <param name="blockSize">The block size to use for compression.</param>
            <param name="compressionLevel">The compression level to use.</param>
            <exception cref="T:System.Exception">Thrown if the compression context or buffer cannot be allocated.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Encoder.writeHeader(Nanook.GrindCore.CompressionBuffer,System.Int32)">
            <summary>
            Writes the LZ4 frame header to the output buffer if it has not already been written.
            </summary>
            <param name="outData">The output buffer to write the header to.</param>
            <param name="totalCompressed">The current total number of compressed bytes.</param>
            <returns>The updated total number of compressed bytes.</returns>
            <exception cref="T:System.Exception">Thrown if the header cannot be written.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Encoder.EncodeData(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Boolean,Nanook.GrindCore.CancellableTask)">
            <summary>
            Encodes data from the input buffer into the output buffer using LZ4 frame compression.
            </summary>
            <param name="inData">The input buffer containing data to compress.</param>
            <param name="outData">The output buffer to write compressed data to.</param>
            <param name="final">Indicates if this is the final block of data.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <returns>The total number of bytes written to the output buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="inData"/> or <paramref name="outData"/> is not at the correct position.</exception>
            <exception cref="T:System.Exception">Thrown if compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Encoder.Flush(Nanook.GrindCore.CompressionBuffer,System.Boolean,System.Boolean)">
            <summary>
            Flushes any remaining compressed data to the output buffer and finalizes the LZ4 frame if requested.
            </summary>
            <param name="outData">The output buffer to write flushed or finalized data to.</param>
            <param name="flush">Indicates if a flush operation should be performed.</param>
            <param name="complete">Indicates if the frame should be finalized.</param>
            <returns>The number of bytes written to the output buffer during the flush/finalize operation.</returns>
            <exception cref="T:System.Exception">Thrown if flush or finalize fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Encoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.Lz4.Lz4Encoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lz4.Lz4Stream">
            <summary>
            Provides a stream implementation for LZ4 compression and decompression.
            Inherits common <see cref="T:System.IO.Stream"/> functionality from <see cref="T:Nanook.GrindCore.CompressionStream"/>.
            Uses a customized LZ4 implementation to allow the Stream.Write pattern for compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lz4.Lz4Stream.BufferSizeInput">
            <summary>
            Gets the input buffer size for LZ4 operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lz4.Lz4Stream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for LZ4 operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Stream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lz4.Lz4Stream"/> class with the specified stream and options.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Stream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads data from the stream and decompresses it using LZ4.
            Updates the position with the running total of bytes processed from the source stream.
            </summary>
            <param name="data">The buffer to read decompressed data into.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the underlying stream.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the buffer.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in decompression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Stream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Compresses data using LZ4 and writes it to the stream.
            Updates the position with the running total of bytes processed from the source stream.
            </summary>
            <param name="data">The buffer containing data to compress and write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in compression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Stream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes any remaining compressed data to the stream.
            </summary>
            <param name="data">The buffer containing data to flush.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lz4.Lz4Stream.OnDispose">
            <summary>
            Disposes the <see cref="T:Nanook.GrindCore.Lz4.Lz4Stream"/> and its resources.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.Lzma2Block">
            <summary>
            Provides a block-based implementation of the LZMA2 compression algorithm.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.Lzma2Block.RequiredCompressOutputSize">
            <summary>
            Gets the required output buffer size for compression, as determined by the LZMA2 algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Block.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Block"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Block.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Compresses the source data block into the destination data block using LZMA2.
            </summary>
            <param name="srcData">The source data block to compress.</param>
            <param name="dstData">The destination data block to write compressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Block.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Decompresses the source data block into the destination data block using LZMA2.
            </summary>
            <param name="srcData">The source data block to decompress.</param>
            <param name="dstData">The destination data block to write decompressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if decompression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Block.OnDispose">
            <summary>
            Releases any resources used by the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Block"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.Lzma2BlockInfo">
            <summary>
            Represents information about a single LZMA2 sub-block.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Lzma.Lzma2BlockInfo.IsTerminator">
            <summary>
            Gets a value indicating whether this block is a terminator.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Lzma.Lzma2BlockInfo.IsControlBlock">
            <summary>
            Gets a value indicating whether this block is a control block.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Lzma.Lzma2BlockInfo.InitState">
            <summary>
            Gets a value indicating whether this block initializes the decoder state.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Lzma.Lzma2BlockInfo.InitProp">
            <summary>
            Gets a value indicating whether this block initializes the decoder properties.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Lzma.Lzma2BlockInfo.Prop">
            <summary>
            Gets the property byte for this block, if present.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Lzma.Lzma2BlockInfo.UncompressedSize">
            <summary>
            Gets the uncompressed size of this block.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Lzma.Lzma2BlockInfo.CompressedSize">
            <summary>
            Gets the compressed size of this block.
            </summary>
        </member>
        <member name="F:Nanook.GrindCore.Lzma.Lzma2BlockInfo.CompressedHeaderSize">
            <summary>
            Gets the size of the compressed header for this block.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.Lzma2BlockInfo.BlockSize">
            <summary>
            Gets the total block size (compressed size plus header size).
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.Lzma2BlockInfo.NewBlock">
            <summary>
            Gets a value indicating whether this is a new block with control, state, and property initialization.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.Lzma2Decoder">
            <summary>
            Provides a decoder for LZMA2-compressed data, supporting block-based decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.Lzma2Decoder.Properties">
            <summary>
            Gets the LZMA2 property byte used for decoding.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Decoder.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Decoder"/> class with the specified LZMA2 property byte.
            </summary>
            <param name="properties">The LZMA2 property byte required for decoding.</param>
            <exception cref="T:System.Exception">Thrown if the decoder context cannot be allocated.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Decoder.createDecoder(System.Byte)">
            <summary>
            Allocates and initializes the decoder context with the specified property byte.
            </summary>
            <param name="props">The LZMA2 property byte.</param>
            <exception cref="T:System.Exception">Thrown if the decoder context cannot be allocated.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Decoder.ReadSubBlockInfo(System.Byte[],System.UInt64)">
            <summary>
            Reads information about a sub-block from the input data at the specified offset.
            </summary>
            <param name="inData">The input data array.</param>
            <param name="inOffset">The offset within the input data array.</param>
            <returns>A <see cref="T:Nanook.GrindCore.Lzma.Lzma2BlockInfo"/> structure describing the sub-block.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="inOffset"/> is outside the bounds of the data array.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Decoder.SetProps(System.Byte)">
            <summary>
            Sets the LZMA2 property byte for the decoder, reinitializing the decoder context.
            </summary>
            <param name="props">The LZMA2 property byte.</param>
            <exception cref="T:System.Exception">Thrown if the decoder context cannot be allocated.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Decoder.SetState">
            <summary>
            Initializes the decoder state.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Decoder.DecodeData(Nanook.GrindCore.CompressionBuffer,System.Int32@,Nanook.GrindCore.CompressionBuffer,System.Int32,System.Int32@)">
            <summary>
            Decodes LZMA2-compressed data from the input buffer into the output buffer.
            </summary>
            <param name="inData">The input buffer containing compressed data.</param>
            <param name="inSize">Reference to the number of bytes available to read from the input buffer. Updated with the number of bytes consumed.</param>
            <param name="outData">The output buffer to write decompressed data to.</param>
            <param name="outSize">The number of bytes available to write to the output buffer.</param>
            <param name="status">Outputs the status of the decompression operation.</param>
            <returns>The number of bytes written to the output buffer.</returns>
            <exception cref="T:System.Exception">Thrown if decompression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Decoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Decoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.Lzma2Encoder">
            <summary>
            Provides an encoder for LZMA2-compressed data, supporting block-based and pseudo-solid compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.Lzma2Encoder.Properties">
            <summary>
            Gets the LZMA2 property byte used for encoding.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.Lzma2Encoder.BlockSize">
            <summary>
            Gets the block size used for compression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Encoder.#ctor(System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Encoder"/> class with the specified compression parameters.
            </summary>
            <param name="level">The compression level to use (default is 5).</param>
            <param name="threads">The number of threads to use (default is 1).</param>
            <param name="blockSize">The block size to use for compression (-1 for solid mode, 0 for auto, default is -1).</param>
            <param name="dictSize">The dictionary size to use (default is 0).</param>
            <param name="wordSize">The word size to use (default is 0).</param>
            <param name="minBufferSize">The minimum buffer size to use (default is 0).</param>
            <exception cref="T:System.Exception">Thrown if the encoder context or buffer cannot be allocated or configured.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Encoder.EncodeData(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Boolean,Nanook.GrindCore.CancellableTask)">
            <summary>
            Encodes data from the input buffer into the output buffer using LZMA2 compression.
            </summary>
            <param name="inData">The input buffer containing data to compress.</param>
            <param name="outData">The output buffer to write compressed data to.</param>
            <param name="final">Indicates if this is the final block of data.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <returns>The total number of bytes written to the output buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="inData"/> or <paramref name="outData"/> is not at the correct position.</exception>
            <exception cref="T:System.Exception">Thrown if compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Encoder.encodeDataMt(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Boolean,Nanook.GrindCore.CancellableTask)">
            <summary>
            Encodes data using multi-threaded block mode.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Encoder.encodeDataSolid(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Boolean,Nanook.GrindCore.CancellableTask)">
            <summary>
            Encodes data using pseudo-solid mode.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Encoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Encoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.Lzma2Stream">
            <summary>
            Provides a stream implementation for LZMA2 compression and decompression.
            Inherits common <see cref="T:System.IO.Stream"/> functionality from <see cref="T:Nanook.GrindCore.CompressionStream"/>.
            Uses a customized LZMA2 implementation to allow the Stream.Write pattern for compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.Lzma2Stream.BufferSizeInput">
            <summary>
            Gets the input buffer size for LZMA2 operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.Lzma2Stream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for LZMA2 operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Stream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Stream"/> class with the specified stream, options, and optional dictionary size.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
            <param name="dictSize">The dictionary size to use for compression (default is 0).</param>
            <exception cref="T:System.Exception">Thrown if <paramref name="options"/>.InitProperties is not set when decompressing.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Stream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Stream"/> class for compression or decompression.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Stream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads data from the stream and decompresses it using LZMA2.
            Updates the position with the running total of bytes processed from the source stream.
            </summary>
            <param name="data">The buffer to read decompressed data into.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the underlying stream.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the buffer.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in decompression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Stream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Compresses data using LZMA2 and writes it to the stream.
            Updates the position with the running total of bytes processed from the source stream.
            </summary>
            <param name="data">The buffer containing data to compress and write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in compression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Stream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes any remaining compressed data to the stream and finalizes the compression if requested.
            </summary>
            <param name="data">The buffer containing data to flush.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.Lzma2Stream.OnDispose">
            <summary>
            Disposes the <see cref="T:Nanook.GrindCore.Lzma.Lzma2Stream"/> and its resources.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.LzmaBlock">
            <summary>
            Provides a block-based implementation of the LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.LzmaBlock.RequiredCompressOutputSize">
            <summary>
            Gets the required output buffer size for compression, as determined by the LZMA algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaBlock.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.LzmaBlock"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaBlock.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Compresses the source data block into the destination data block using LZMA.
            </summary>
            <param name="srcData">The source data block to compress.</param>
            <param name="dstData">The destination data block to write compressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaBlock.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Decompresses the source data block into the destination data block using LZMA.
            </summary>
            <param name="srcData">The source data block to decompress.</param>
            <param name="dstData">The destination data block to write decompressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if decompression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaBlock.OnDispose">
            <summary>
            Releases any resources used by the <see cref="T:Nanook.GrindCore.Lzma.LzmaBlock"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.LzmaDecoder">
            <summary>
            Provides a decoder for LZMA-compressed data, supporting block-based decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.LzmaDecoder.Properties">
            <summary>
            Gets the LZMA properties used for decoding.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaDecoder.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.LzmaDecoder"/> class with the specified LZMA properties.
            </summary>
            <param name="properties">The LZMA properties required for decoding.</param>
            <exception cref="T:System.Exception">Thrown if the decoder context cannot be allocated.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaDecoder.DecodeData(Nanook.GrindCore.CompressionBuffer,System.Int32@,Nanook.GrindCore.CompressionBuffer,System.Int32,System.Int32@)">
            <summary>
            Decodes LZMA-compressed data from the input buffer into the output buffer.
            </summary>
            <param name="inData">The input buffer containing compressed data.</param>
            <param name="readSz">Outputs the number of bytes read from the input buffer.</param>
            <param name="outData">The output buffer to write decompressed data to.</param>
            <param name="outSize">The number of bytes available to write to the output buffer.</param>
            <param name="status">Outputs the status of the decompression operation.</param>
            <returns>The number of bytes written to the output buffer.</returns>
            <exception cref="T:System.Exception">Thrown if decompression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaDecoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.Lzma.LzmaDecoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.LzmaEncoder">
            <summary>
            Provides an encoder for LZMA-compressed data, supporting block-based compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.LzmaEncoder.Properties">
            <summary>
            Gets the LZMA properties used for encoding.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.LzmaEncoder.BlockSize">
            <summary>
            Gets the block size used for compression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaEncoder.#ctor(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.LzmaEncoder"/> class with the specified compression parameters.
            </summary>
            <param name="level">The compression level to use (default is 5).</param>
            <param name="dictSize">The dictionary size to use (default is 0).</param>
            <param name="wordSize">The word size to use (default is 0).</param>
            <exception cref="T:System.Exception">Thrown if the encoder context or buffer cannot be allocated or configured.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaEncoder.EncodeData(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Boolean,Nanook.GrindCore.CancellableTask)">
            <summary>
            Encodes data from the input buffer into the output buffer using LZMA compression.
            </summary>
            <param name="inData">The input buffer containing data to compress.</param>
            <param name="outData">The output buffer to write compressed data to.</param>
            <param name="final">Indicates if this is the final block of data.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <returns>The total number of bytes written to the output buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="inData"/> or <paramref name="outData"/> is not at the correct position.</exception>
            <exception cref="T:System.Exception">Thrown if compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaEncoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.Lzma.LzmaEncoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.Lzma.LzmaStream">
            <summary>
            Provides a stream implementation for LZMA compression and decompression.
            Inherits common <see cref="T:System.IO.Stream"/> functionality from <see cref="T:Nanook.GrindCore.CompressionStream"/>.
            Uses a customized LZMA implementation to allow the Stream.Write pattern for compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.LzmaStream.BufferSizeInput">
            <summary>
            Gets the input buffer size for LZMA operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.Lzma.LzmaStream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for LZMA operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.LzmaStream"/> class with the specified stream, options, and optional dictionary size.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
            <param name="dictionarySize">The dictionary size to use for compression (default is 0).</param>
            <exception cref="T:System.Exception">Thrown if <paramref name="options"/>.InitProperties is not set when decompressing.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.Lzma.LzmaStream"/> class for compression or decompression.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaStream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads data from the stream and decompresses it using LZMA.
            Updates the position with the running total of bytes processed from the source stream.
            </summary>
            <param name="data">The buffer to read decompressed data into.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the underlying stream.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the buffer.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in decompression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaStream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Compresses data using LZMA and writes it to the stream.
            Updates the position with the running total of bytes processed from the source stream.
            </summary>
            <param name="data">The buffer containing data to compress and write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in compression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaStream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes any remaining compressed data to the stream.
            </summary>
            <param name="data">The buffer containing data to flush.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.Lzma.LzmaStream.OnDispose">
            <summary>
            Disposes the <see cref="T:Nanook.GrindCore.Lzma.LzmaStream"/> and its resources.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.MD.MD2">
            <summary>
            Provides implementation of the MD2 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.MD.MD2"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.processData(System.Byte[],System.Int32,System.Int32,Nanook.GrindCore.Interop.MD2_CTX*,Nanook.GrindCore.HashBuffer)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="data">The input data to process.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
            <param name="buffer">The buffer used for block processing and padding.</param>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.MD.MD2"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.MD.MD2"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.bufferPadProcess(Nanook.GrindCore.Interop.MD2_CTX*,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Processes the buffer with padding for MD2 block alignment.
            </summary>
            <param name="ctx">Pointer to the hash context.</param>
            <param name="data">The data buffer to pad and process.</param>
            <param name="offset">The offset in the data buffer.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.bufferProcess(Nanook.GrindCore.Interop.MD2_CTX*,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Processes the specified region of the byte array.
            </summary>
            <param name="ctx">Pointer to the hash context.</param>
            <param name="data">The data buffer to process.</param>
            <param name="offset">The offset in the data buffer.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD2.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.MD.MD4">
            <summary>
            Provides implementation of the MD4 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.MD.MD4"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD4.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD4.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD4.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.MD4_CTX*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD4.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.MD.MD4"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.MD.MD4"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD4.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD4.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD4.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.MD.MD5">
            <summary>
            Represents the MD5 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD5.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.MD.MD5"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD5.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD5.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD5.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.MD5_CTX*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD5.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.MD.MD5"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.MD.MD5"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD5.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD5.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.MD.MD5.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="P:Nanook.GrindCore.SR.ArgumentOutOfRange_Enum">
            <summary>Enum value was out of legal range.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.CannotReadFromDeflateStream">
            <summary>Reading from the compression stream is not supported.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.CannotWriteToDeflateStream">
            <summary>Writing to the compression stream is not supported.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.GenericInvalidData">
            <summary>Found invalid data while decoding.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.InvalidBeginCall">
            <summary>Only one asynchronous reader or writer is allowed time at one time.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.InvalidBlockLength">
            <summary>Block length does not match with its complement.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.InvalidHuffmanData">
            <summary>Failed to construct a huffman tree using the length array. The stream might be corrupted.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.NotSupported">
            <summary>This operation is not supported.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.NotSupported_UnreadableStream">
            <summary>Stream does not support reading.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.NotSupported_UnwritableStream">
            <summary>Stream does not support writing.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.UnknownBlockType">
            <summary>Unknown block type. Stream might be corrupted.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.UnknownState">
            <summary>Decoder is in some unknown state. This might be caused by corrupted data.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ZLibErrorDLLLoadError">
            <summary>The underlying compression routine could not be loaded correctly.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ZLibErrorInconsistentStream">
            <summary>The stream state of the underlying compression routine is inconsistent.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ZLibErrorIncorrectInitParameters">
            <summary>The underlying compression routine received incorrect initialization parameters.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ZLibErrorNotEnoughMemory">
            <summary>The underlying compression routine could not reserve sufficient memory.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ZLibErrorVersionMismatch">
            <summary>The version of the underlying compression routine does not match expected version.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ZLibErrorUnexpected">
            <summary>The underlying compression routine returned an unexpected error code.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.CDCorrupt">
            <summary>Central Directory corrupt.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.CentralDirectoryInvalid">
            <summary>Central Directory is invalid.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.CreateInReadMode">
            <summary>Cannot create entries on an archive opened in read mode.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.CreateModeCapabilities">
            <summary>Cannot use create mode on a non-writable stream.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.CreateModeCreateEntryWhileOpen">
            <summary>Entries cannot be created while previously created entries are still open.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.CreateModeWriteOnceAndOneEntryAtATime">
            <summary>Entries in create mode may only be written to once, and only one entry may be held open at a time.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.DateTimeOutOfRange">
            <summary>The DateTimeOffset specified cannot be converted into a Zip file timestamp.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.DeletedEntry">
            <summary>Cannot modify deleted entry.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.DeleteOnlyInUpdate">
            <summary>Delete can only be used when the archive is in Update mode.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.DeleteOpenEntry">
            <summary>Cannot delete an entry currently open for writing.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.EntriesInCreateMode">
            <summary>Cannot access entries in Create mode.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.EntryNameAndCommentEncodingNotSupported">
            <summary>The specified encoding is not supported for entry names and comments.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.EntryNamesTooLong">
            <summary>Entry names cannot require more than 2^16 bits.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.EntryTooLarge">
            <summary>Entries larger than 4GB are not supported in Update mode.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.EOCDNotFound">
            <summary>End of Central Directory record could not be found.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.FieldTooBigCompressedSize">
            <summary>Compressed Size cannot be held in an Int64.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.FieldTooBigLocalHeaderOffset">
            <summary>Local Header Offset cannot be held in an Int64.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.FieldTooBigNumEntries">
            <summary>Number of Entries cannot be held in an Int64.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.FieldTooBigOffsetToCD">
            <summary>Offset to Central Directory cannot be held in an Int64.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.FieldTooBigOffsetToZip64EOCD">
            <summary>Offset to Zip64 End Of Central Directory record cannot be held in an Int64.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.FieldTooBigUncompressedSize">
            <summary>Uncompressed Size cannot be held in an Int64.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.FrozenAfterWrite">
            <summary>Cannot modify entry in Create mode after entry has been opened for writing.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.HiddenStreamName">
            <summary>A stream from ZipArchiveEntry has been _disposed.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.LengthAfterWrite">
            <summary>Length properties are unavailable once an entry has been opened for writing.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.LocalFileHeaderCorrupt">
            <summary>A local file header is corrupt.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.NumEntriesWrong">
            <summary>Number of entries expected in End Of Central Directory does not correspond to number of entries in Central Directory.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ReadingNotSupported">
            <summary>This stream from ZipArchiveEntry does not support reading.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ReadModeCapabilities">
            <summary>Cannot use read mode on a non-readable stream.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ReadOnlyArchive">
            <summary>Cannot modify read-only archive.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.SeekingNotSupported">
            <summary>This stream from ZipArchiveEntry does not support seeking.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.SetLengthRequiresSeekingAndWriting">
            <summary>SetLength requires a stream that supports seeking and writing.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.SplitSpanned">
            <summary>Split or spanned archives are not supported.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.TruncatedData">
            <summary>Found truncated data while decoding.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.UnexpectedEndOfStream">
            <summary>Zip file corrupt: unexpected end of stream reached.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.UnsupportedCompression">
            <summary>The archive entry was compressed using an unsupported compression method.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.UnsupportedCompressionMethod">
            <summary>The archive entry was compressed using {0} and is not supported.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.UpdateModeCapabilities">
            <summary>Update mode requires a stream with read, write, and seek capabilities.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.UpdateModeOneStream">
            <summary>Entries cannot be opened multiple times in Update mode.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.WritingNotSupported">
            <summary>This stream from ZipArchiveEntry does not support writing.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.Zip64EOCDNotWhereExpected">
            <summary>Zip 64 End of Central Directory Record not where indicated.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.PlatformNotSupported_Compression">
            <summary>Nanook.GrindCore is not supported on this platform.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.Stream_FalseCanRead">
            <summary>Stream does not support reading.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.Stream_FalseCanWrite">
            <summary>Stream does not support writing.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.ArgumentOutOfRange_NeedPosNum">
            <summary>Positive number required.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliEncoder_Create">
            <summary>Failed to create BrotliEncoder instance</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliEncoder_Disposed">
            <summary>Can not access a closed Encoder.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliEncoder_Quality">
            <summary>Provided BrotliEncoder Quality of {0} is not between the minimum value of {1} and the maximum value of {2}</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliEncoder_Window">
            <summary>Provided BrotliEncoder Window of {0} is not between the minimum value of {1} and the maximum value of {2}</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliEncoder_InvalidSetParameter">
            <summary>The BrotliEncoder {0} can not be changed at current encoder state.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliDecoder_Create">
            <summary>Failed to create BrotliDecoder instance</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliDecoder_Disposed">
            <summary>Can not access a closed Decoder.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliStream_Compress_UnsupportedOperation">
            <summary>Can not perform Read operations on a BrotliStream constructed with CompressionMode.Process.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliStream_Compress_InvalidData">
            <summary>Encoder ran into invalid data.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliStream_Decompress_UnsupportedOperation">
            <summary>Can not perform Write operations on a BrotliStream constructed with CompressionMode.DecodeData.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliStream_Decompress_InvalidData">
            <summary>Decoder ran into invalid data.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliStream_Decompress_InvalidStream">
            <summary>BrotliStream.BaseStream returned more bytes than requested in Read.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.BrotliStream_Decompress_TruncatedData">
            <summary>Found truncated data while decoding.</summary>
        </member>
        <member name="P:Nanook.GrindCore.SR.IOCompressionBrotli_PlatformNotSupported">
            <summary>System.IO.Compression.Brotli is not supported on this platform.</summary>
        </member>
        <member name="T:Nanook.GrindCore.SHA.SHA1">
            <summary>
            Represents the SHA1 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA1"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA1.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA1.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA1.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.CSha1*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA1.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA1"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA1"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA1.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA1.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_256.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_256"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_256.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_256.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_256.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.CSha256*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_256.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_256"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_256"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_256.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_256.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_256.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.SHA.SHA2_384">
            <summary>
            Represents the SHA2_384 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_384.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_384"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_384.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_384.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_384.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.SHA384_CTX*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_384.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_384"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_384"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_384.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_384.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_384.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.SHA.SHA2_512">
            <summary>
            Represents the SHA2_512 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_512.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_512"/> class.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_512.Compute(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_512.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_512.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.SHA512_CTX*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_512.Create">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_512"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA2_512"/> class.</returns>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_512.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_512.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA2_512.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.SHA.SHA3">
            <summary>
            Represents the SHA3 hashing algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA3"/> class with the specified bit size.
            </summary>
            <param name="bitSize">The bit size of the SHA3 algorithm (224, 256, 384, 512).</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="bitSize"/> is not 224, 256, 384, or 512.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA3.Compute(System.Byte[],System.Int32)">
            <summary>
            Computes the hash value for the specified byte array with the specified bit size.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="bitSize">The bit size of the SHA3 algorithm (224, 256, 384, 512).</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="bitSize"/> is not 224, 256, 384, or 512.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA3.Compute(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the byte array with the specified bit size.
            </summary>
            <param name="data">The input data to compute the hash code for.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="bitSize">The bit size of the SHA3 algorithm (224, 256, 384, 512).</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="length"/> is greater than the buffer length, or if <paramref name="bitSize"/> is not 224, 256, 384, or 512.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA3.processData(System.Byte*,System.Int32,System.Int32,Nanook.GrindCore.Interop.SHA3_CTX*)">
            <summary>
            Processes the specified region of the byte array in 256 MiB chunks.
            </summary>
            <param name="dataPtr">Pointer to the input data.</param>
            <param name="offset">The offset in the data to start at.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="ctx">Pointer to the hash context.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA3.Create(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA3"/> class with the specified bit size.
            </summary>
            <param name="bitSize">The bit size of the SHA3 algorithm (224, 256, 384, 512).</param>
            <returns>A new instance of the <see cref="T:Nanook.GrindCore.SHA.SHA3"/> class.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="bitSize"/> is not 224, 256, 384, or 512.</exception>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA3.Initialize">
            <summary>
            Initializes the hash algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA3.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="data">The input data.</param>
            <param name="offset">The offset in the byte array to start at.</param>
            <param name="size">The number of bytes to process.</param>
        </member>
        <member name="M:Nanook.GrindCore.SHA.SHA3.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Nanook.GrindCore.Utilities">
            <summary>
            Provides utility methods for byte and endianness operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.Utilities.GetBytes(System.UInt64)">
            <summary>
            Returns the bytes of the specified <see cref="T:System.UInt64"/> value in big-endian order.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A byte array representing the value in big-endian order.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Utilities.GetBytes(System.UInt32)">
            <summary>
            Returns the bytes of the specified <see cref="T:System.UInt32"/> value in big-endian order.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A byte array representing the value in big-endian order.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Utilities.swapBytes(System.UInt64)">
            <summary>
            Swaps the byte order of a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The value to swap.</param>
            <returns>The value with its bytes reversed.</returns>
        </member>
        <member name="M:Nanook.GrindCore.Utilities.swapBytes(System.UInt32)">
            <summary>
            Swaps the byte order of a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The value to swap.</param>
            <returns>The value with its bytes reversed.</returns>
        </member>
        <member name="T:Nanook.GrindCore.ByteArrayExtensions">
            <summary>
            Provides extension methods for byte arrays.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ByteArrayExtensions.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to its hexadecimal string representation.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A string containing the hexadecimal representation of the byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="bytes"/> is null.</exception>
        </member>
        <member name="T:Nanook.GrindCore.UIntExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.UIntExtensions.ToByteArray(System.UInt32)">
            <summary>
            Converts a <see cref="T:System.UInt32"/> value to a byte array in big-endian order.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A byte array representing the value in big-endian order.</returns>
        </member>
        <member name="T:Nanook.GrindCore.ULongExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ULongExtensions.ToByteArray(System.UInt64)">
            <summary>
            Converts a <see cref="T:System.UInt64"/> value to a byte array in big-endian order.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A byte array representing the value in big-endian order.</returns>
        </member>
        <member name="T:Nanook.GrindCore.HashBuffer">
            <summary>
            Handles data being processed that does not comply with alignment and padding requirements.
            For example, some hash algorithms (e.g., MD2) require data to be in fixed-size blocks.
            This class ensures that requirement is fulfilled by buffering and processing data in block-sized chunks.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.HashBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.HashBuffer"/> class with the specified block size.
            </summary>
            <param name="bytes">The block size in bytes.</param>
        </member>
        <member name="P:Nanook.GrindCore.HashBuffer.HasData">
            <summary>
            Gets a value indicating whether there is any buffered data.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.HashBuffer.Process(System.Byte[],System.Int32,System.Int32,System.Action{System.Byte[],System.Int32,System.Int32})">
            <summary>
            Processes the input data in block-sized chunks, buffering any remainder.
            </summary>
            <param name="data">The input data array.</param>
            <param name="offset">The offset in the input array at which to begin processing.</param>
            <param name="length">The number of bytes to process.</param>
            <param name="process">The action to call for each full block of data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> or <paramref name="process"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative, or if the range is invalid.</exception>
        </member>
        <member name="M:Nanook.GrindCore.HashBuffer.Complete(System.Action{System.Byte[],System.Int32,System.Int32})">
            <summary>
            Completes the processing by handling any remaining buffered data.
            </summary>
            <param name="process">The action to call for the final block of data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="process"/> is null.</exception>
        </member>
        <member name="T:Nanook.GrindCore.ZLib.Crc32Helper">
            <summary>
            Provides helper methods for calculating CRC32 checksums using ZLib.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.Crc32Helper.UpdateCrc32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates a CRC32 checksum with the specified buffer segment.
            </summary>
            <param name="crc32">The initial CRC32 value.</param>
            <param name="buffer">The buffer containing the data to update the CRC with.</param>
            <param name="offset">The offset in the buffer at which to start.</param>
            <param name="length">The number of bytes to use from the buffer.</param>
            <returns>The updated CRC32 value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative, or if the range is invalid.</exception>
        </member>
        <member name="T:Nanook.GrindCore.ZLib.Crc32NgHelper">
            <summary>
            Provides helper methods for calculating CRC32 checksums using ZLibNg.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.Crc32NgHelper.UpdateCrc32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates a CRC32 checksum with the specified buffer segment using ZLibNg.
            </summary>
            <param name="crc32">The initial CRC32 value.</param>
            <param name="buffer">The buffer containing the data to update the CRC with.</param>
            <param name="offset">The offset in the buffer at which to start.</param>
            <param name="length">The number of bytes to use from the buffer.</param>
            <returns>The updated CRC32 value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="length"/> is negative, or if the range is invalid.</exception>
        </member>
        <member name="T:Nanook.GrindCore.ZLib.ZLib">
            <summary>
            Provides static methods for compressing and decompressing data using ZLib and ZLibNg.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.ZLib.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Compresses data using ZLib or ZLibNg.
            </summary>
            <param name="dest">The destination buffer for compressed data.</param>
            <param name="destOffset">The offset in the destination buffer to start writing.</param>
            <param name="destLen">The maximum number of bytes to write to the destination buffer.</param>
            <param name="source">The source buffer containing data to compress.</param>
            <param name="sourceOffset">The offset in the source buffer to start reading.</param>
            <param name="sourceLen">The number of bytes to read from the source buffer.</param>
            <param name="version">The compression version to use (null for default).</param>
            <returns>The number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.ZLib.Compress2(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Compresses data using ZLib or ZLibNg with a specified compression level.
            </summary>
            <param name="dest">The destination buffer for compressed data.</param>
            <param name="destOffset">The offset in the destination buffer to start writing.</param>
            <param name="destLen">The maximum number of bytes to write to the destination buffer.</param>
            <param name="source">The source buffer containing data to compress.</param>
            <param name="sourceOffset">The offset in the source buffer to start reading.</param>
            <param name="sourceLen">The number of bytes to read from the source buffer.</param>
            <param name="level">The compression level to use.</param>
            <param name="version">The compression version to use (null for default).</param>
            <returns>The number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.ZLib.Compress3(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Compresses data using ZLib or ZLibNg with advanced options.
            </summary>
            <param name="dest">The destination buffer for compressed data.</param>
            <param name="destOffset">The offset in the destination buffer to start writing.</param>
            <param name="destLen">The maximum number of bytes to write to the destination buffer.</param>
            <param name="source">The source buffer containing data to compress.</param>
            <param name="sourceOffset">The offset in the source buffer to start reading.</param>
            <param name="sourceLen">The number of bytes to read from the source buffer.</param>
            <param name="level">The compression level to use.</param>
            <param name="windowBits">The window bits parameter for the compression algorithm.</param>
            <param name="strategy">The compression strategy to use.</param>
            <param name="version">The compression version to use (null for default).</param>
            <returns>The number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.ZLib.Uncompress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Decompresses data using ZLib or ZLibNg.
            </summary>
            <param name="dest">The destination buffer for decompressed data.</param>
            <param name="destOffset">The offset in the destination buffer to start writing.</param>
            <param name="destLen">The maximum number of bytes to write to the destination buffer.</param>
            <param name="source">The source buffer containing data to decompress.</param>
            <param name="sourceOffset">The offset in the source buffer to start reading.</param>
            <param name="sourceLen">The number of bytes to read from the source buffer.</param>
            <param name="version">The compression version to use (null for default).</param>
            <returns>The number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.ZLib.Uncompress2(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Decompresses data using ZLib or ZLibNg, updating the source length.
            </summary>
            <param name="dest">The destination buffer for decompressed data.</param>
            <param name="destOffset">The offset in the destination buffer to start writing.</param>
            <param name="destLen">The maximum number of bytes to write to the destination buffer.</param>
            <param name="source">The source buffer containing data to decompress.</param>
            <param name="sourceOffset">The offset in the source buffer to start reading.</param>
            <param name="sourceLen">The number of bytes to read from the source buffer.</param>
            <param name="version">The compression version to use (null for default).</param>
            <returns>The number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.ZLib.Uncompress3(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,Nanook.GrindCore.CompressionVersion)">
            <summary>
            Decompresses data using ZLib or ZLibNg with a specified window bits parameter.
            </summary>
            <param name="dest">The destination buffer for decompressed data.</param>
            <param name="destOffset">The offset in the destination buffer to start writing.</param>
            <param name="destLen">The maximum number of bytes to write to the destination buffer.</param>
            <param name="source">The source buffer containing data to decompress.</param>
            <param name="sourceOffset">The offset in the source buffer to start reading.</param>
            <param name="sourceLen">The number of bytes to read from the source buffer.</param>
            <param name="windowBits">The window bits parameter for the decompression algorithm.</param>
            <param name="version">The compression version to use (null for default).</param>
            <returns>The number of bytes written to the destination buffer.</returns>
            <exception cref="T:System.Exception">Thrown if the specified version is not supported.</exception>
        </member>
        <member name="T:Nanook.GrindCore.ZLib.ZLibStream">
            <summary>
            Provides a stream for ZLib compression and decompression, using the default ZLib window bits.
            Inherits from <see cref="T:Nanook.GrindCore.DeflateZLib.DeflateStream"/>.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ZLib.ZLibStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.ZLib.ZLibStream"/> class with the specified stream and compression options.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> or <paramref name="options"/> is null.</exception>
        </member>
        <member name="T:Nanook.GrindCore.ZStd.ZStdBlock">
            <summary>
            Provides a block-based implementation of the Zstandard (ZStd) compression algorithm.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.ZStd.ZStdBlock.RequiredCompressOutputSize">
            <summary>
            Gets the required output buffer size for compression, as determined by the ZStd algorithm.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdBlock.#ctor(Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.ZStd.ZStdBlock"/> class with the specified compression options.
            </summary>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdBlock.OnCompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Compresses the source data block into the destination data block using ZStd.
            </summary>
            <param name="srcData">The source data block to compress.</param>
            <param name="dstData">The destination data block to write compressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if compression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdBlock.OnDecompress(Nanook.GrindCore.DataBlock,Nanook.GrindCore.DataBlock)">
            <summary>
            Decompresses the source data block into the destination data block using ZStd.
            </summary>
            <param name="srcData">The source data block to decompress.</param>
            <param name="dstData">The destination data block to write decompressed data to.</param>
            <returns>The number of bytes written to the destination block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if decompression fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdBlock.OnDispose">
            <summary>
            Releases any resources used by the <see cref="T:Nanook.GrindCore.ZStd.ZStdBlock"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.ZStd.ZStdDecoder">
            <summary>
            Provides a decoder for Zstandard (ZStd) compressed data, supporting streaming decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.ZStd.ZStdDecoder.InputBufferSize">
            <summary>
            Gets the recommended input buffer size for ZStd decompression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.ZStd.ZStdDecoder.OutputBufferSize">
            <summary>
            Gets the recommended output buffer size for ZStd decompression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.ZStd.ZStdDecoder"/> class and creates a decompression context.
            </summary>
            <exception cref="T:System.Exception">Thrown if the decompression context cannot be created.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdDecoder.DecodeData(Nanook.GrindCore.CompressionBuffer,System.Int32@,Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask)">
            <summary>
            Decodes ZStd-compressed data from the input buffer into the output buffer.
            </summary>
            <param name="inData">The input buffer containing compressed data.</param>
            <param name="readSz">Outputs the number of bytes read from the input buffer.</param>
            <param name="outData">The output buffer to write decompressed data to.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <returns>The total number of bytes written to the output buffer.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdDecoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.ZStd.ZStdDecoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.ZStd.ZStdEncoder">
            <summary>
            Provides an encoder for Zstandard (ZStd) compressed data, supporting streaming compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.ZStd.ZStdEncoder.InputBufferSize">
            <summary>
            Gets the recommended input buffer size for ZStd compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.ZStd.ZStdEncoder.OutputBufferSize">
            <summary>
            Gets the recommended output buffer size for ZStd compression.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdEncoder.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.ZStd.ZStdEncoder"/> class with the specified block size and compression level.
            </summary>
            <param name="blockSize">The block size to use for compression.</param>
            <param name="compressionLevel">The compression level to use (default is 3).</param>
            <exception cref="T:System.Exception">Thrown if the compression context cannot be created or configured.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdEncoder.EncodeData(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CompressionBuffer,System.Boolean,Nanook.GrindCore.CancellableTask)">
            <summary>
            Encodes data from the input buffer into the output buffer using ZStd compression.
            </summary>
            <param name="inData">The input buffer containing data to compress.</param>
            <param name="outData">The output buffer to write compressed data to.</param>
            <param name="final">Indicates if this is the final block of data.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <returns>The total number of bytes written to the output buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="inData"/> or <paramref name="outData"/> is not at the correct position.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
            <exception cref="T:System.Exception">Thrown if compression fails or more data needs to be flushed.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdEncoder.Flush(Nanook.GrindCore.CompressionBuffer)">
            <summary>
            Flushes any remaining compressed data to the output buffer and finalizes the compression stream.
            </summary>
            <param name="outData">The output buffer to write flushed data to.</param>
            <returns>The total number of bytes flushed and finalized.</returns>
            <exception cref="T:System.Exception">Thrown if flushing or finalizing the compression stream fails.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdEncoder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Nanook.GrindCore.ZStd.ZStdEncoder"/>.
            </summary>
        </member>
        <member name="T:Nanook.GrindCore.ZStd.ZStdStream">
            <summary>
            Provides a stream implementation for Zstandard (ZStd) compression and decompression.
            Inherits common <see cref="T:System.IO.Stream"/> functionality from <see cref="T:Nanook.GrindCore.CompressionStream"/>.
            Uses a customized ZStd implementation to allow the Stream.Write pattern for compression.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.ZStd.ZStdStream.BufferSizeInput">
            <summary>
            Gets the input buffer size for ZStd operations.
            </summary>
        </member>
        <member name="P:Nanook.GrindCore.ZStd.ZStdStream.BufferSizeOutput">
            <summary>
            Gets the output buffer size for ZStd operations.
            </summary>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdStream.#ctor(System.IO.Stream,Nanook.GrindCore.CompressionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nanook.GrindCore.ZStd.ZStdStream"/> class with the specified stream and options.
            </summary>
            <param name="stream">The underlying stream to read from or write to.</param>
            <param name="options">The compression options to use.</param>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdStream.OnRead(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Int32)">
            <summary>
            Reads data from the stream and decompresses it using ZStd.
            Updates the position with the running total of bytes processed from the source stream.
            </summary>
            <param name="data">The buffer to read decompressed data into.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesReadFromStream">The number of bytes read from the underlying stream.</param>
            <param name="length"> The maximum number of bytes to read.If 0, the method will fill the buffer if possible.</param>
            <returns>The number of bytes written to the buffer.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in decompression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdStream.OnWrite(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@)">
            <summary>
            Compresses data using ZStd and writes it to the stream.
            Updates the position with the running total of bytes processed from the source stream.
            </summary>
            <param name="data">The buffer containing data to compress and write.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the stream is not in compression mode.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdStream.OnFlush(Nanook.GrindCore.CompressionBuffer,Nanook.GrindCore.CancellableTask,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Flushes any remaining compressed data to the stream and finalizes the compression if requested.
            </summary>
            <param name="data">The buffer containing data to flush.</param>
            <param name="cancel">A cancellable task for cooperative cancellation.</param>
            <param name="bytesWrittenToStream">The number of bytes written to the underlying stream.</param>
            <param name="flush">Indicates if this is a flush operation.</param>
            <param name="complete">Indicates that there is no more data to compress.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if cancellation is requested.</exception>
        </member>
        <member name="M:Nanook.GrindCore.ZStd.ZStdStream.OnDispose">
            <summary>
            Disposes the <see cref="T:Nanook.GrindCore.ZStd.ZStdStream"/> and its resources.
            </summary>
        </member>
    </members>
</doc>
